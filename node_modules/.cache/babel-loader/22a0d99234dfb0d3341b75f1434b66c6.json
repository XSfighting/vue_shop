{"ast":null,"code":"import _toConsumableArray from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      // 所有角色列表数据\n      rolelist: [],\n      // 控制分配权限对话框的显示与隐藏\n      setRightDialogVisible: false,\n      // 所有权限的数据\n      rightslist: [],\n      // 树形控件的属性绑定对象\n      treeProps: {\n        label: 'authName',\n        children: 'children'\n      },\n      // 默认选中的节点Id值数组\n      defKeys: [],\n      // 当前即将分配权限的角色id\n      roleId: ''\n    };\n  },\n  created: function created() {\n    this.getRolesList();\n  },\n  methods: {\n    // 获取所有角色的列表\n    getRolesList: function getRolesList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('roles');\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取角色列表失败！'));\n\n              case 6:\n                _this.rolelist = res.data;\n                console.log(_this.rolelist);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 根据Id删除对应的权限\n    removeRightById: function removeRightById(role, rightId) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var confirmResult, _yield$_this2$$http$d, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this2.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context2.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.info('取消了删除！'));\n\n              case 5:\n                _context2.next = 7;\n                return _this2.$http.delete(\"roles/\".concat(role.id, \"/rights/\").concat(rightId));\n\n              case 7:\n                _yield$_this2$$http$d = _context2.sent;\n                res = _yield$_this2$$http$d.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error('删除权限失败！'));\n\n              case 11:\n                // this.getRolesList()\n                role.children = res.data;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 展示分配权限的对话框\n    showSetRightDialog: function showSetRightDialog(role) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _yield$_this3$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this3.roleId = role.id; // 获取所有权限的数据\n\n                _context3.next = 3;\n                return _this3.$http.get('rights/tree');\n\n              case 3:\n                _yield$_this3$$http$g = _context3.sent;\n                res = _yield$_this3$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", _this3.$message.error('获取权限数据失败！'));\n\n              case 7:\n                // 把获取到的权限数据保存到 data 中\n                _this3.rightslist = res.data;\n                console.log(_this3.rightslist); // 递归获取三级节点的Id\n\n                _this3.getLeafKeys(role, _this3.defKeys);\n\n                _this3.setRightDialogVisible = true;\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    // 通过递归的形式，获取角色下所有三级权限的id，并保存到 defKeys 数组中\n    getLeafKeys: function getLeafKeys(node, arr) {\n      var _this4 = this;\n\n      // 如果当前 node 节点不包含 children 属性，则是三级节点\n      if (!node.children) {\n        return arr.push(node.id);\n      }\n\n      node.children.forEach(function (item) {\n        return _this4.getLeafKeys(item, arr);\n      });\n    },\n    // 监听分配权限对话框的关闭事件\n    setRightDialogClosed: function setRightDialogClosed() {\n      this.defKeys = [];\n    },\n    // 点击为角色分配权限\n    allotRights: function allotRights() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var keys, idStr, _yield$_this5$$http$p, res;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                keys = [].concat(_toConsumableArray(_this5.$refs.treeRef.getCheckedKeys()), _toConsumableArray(_this5.$refs.treeRef.getHalfCheckedKeys()));\n                idStr = keys.join(',');\n                _context4.next = 4;\n                return _this5.$http.post(\"roles/\".concat(_this5.roleId, \"/rights\"), {\n                  rids: idStr\n                });\n\n              case 4:\n                _yield$_this5$$http$p = _context4.sent;\n                res = _yield$_this5$$http$p.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _this5.$message.error('分配权限失败！'));\n\n              case 8:\n                _this5.$message.success('分配权限成功！');\n\n                _this5.getRolesList();\n\n                _this5.setRightDialogVisible = false;\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;EACAA,IADA,kBACA;IACA;MACA;MACAC,YAFA;MAGA;MACAC,4BAJA;MAKA;MACAC,cANA;MAOA;MACAC;QACAC,iBADA;QAEAC;MAFA,CARA;MAYA;MACAC,WAbA;MAcA;MACAC;IAfA;EAiBA,CAnBA;EAoBAC,OApBA,qBAoBA;IACA;EACA,CAtBA;EAuBAC;IACA;IACAC,YAFA,0BAEA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACA,wBADA;;cAAA;gBAAA;gBACAC,GADA,yBACAZ,IADA;;gBAAA,MAGAY,uBAHA;kBAAA;kBAAA;gBAAA;;gBAAA,iCAIA,iCAJA;;cAAA;gBAOA;gBAEAC;;cATA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAUA,CAZA;IAaA;IACAC,eAdA,2BAcAC,IAdA,EAcAC,OAdA,EAcA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAEA,gBACA,oBADA,EAEA,IAFA,EAGA;kBACAC,uBADA;kBAEAC,sBAFA;kBAGAC;gBAHA,CAHA,EAQAC,KARA,CAQA;kBAAA;gBAAA,CARA,CAFA;;cAAA;gBAEAC,aAFA;;gBAAA,MAYAA,2BAZA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAaA,8BAbA;;cAAA;gBAAA;gBAAA,OAgBA,oCACAN,OADA,qBACAC,OADA,EAhBA;;cAAA;gBAAA;gBAgBAJ,GAhBA,yBAgBAZ,IAhBA;;gBAAA,MAoBAY,uBApBA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAqBA,gCArBA;;cAAA;gBAwBA;gBACAG;;cAzBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IA0BA,CAxCA;IAyCA;IACAO,kBA1CA,8BA0CAP,IA1CA,EA0CA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACA,wBADA,CAEA;;gBAFA;gBAAA,OAGA,+BAHA;;cAAA;gBAAA;gBAGAH,GAHA,yBAGAZ,IAHA;;gBAAA,MAKAY,uBALA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAMA,kCANA;;cAAA;gBASA;gBACA;gBACAC,+BAXA,CAaA;;gBACA;;gBAEA;;cAhBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAiBA,CA3DA;IA4DA;IACAU,WA7DA,uBA6DAC,IA7DA,EA6DAC,GA7DA,EA6DA;MAAA;;MACA;MACA;QACA;MACA;;MAEAD;QAAA;MAAA;IACA,CApEA;IAqEA;IACAE,oBAtEA,kCAsEA;MACA;IACA,CAxEA;IAyEA;IACAC,WA1EA,yBA0EA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACAC,IADA,gCAEA,qCAFA,sBAGA,yCAHA;gBAMAC,KANA,GAMAD,cANA;gBAAA;gBAAA,OAQA,kCACA,aADA,cAEA;kBAAAE;gBAAA,CAFA,CARA;;cAAA;gBAAA;gBAQAlB,GARA,yBAQAZ,IARA;;gBAAA,MAaAY,uBAbA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAcA,gCAdA;;cAAA;gBAiBA;;gBACA;;gBACA;;cAnBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAoBA;EA9FA;AAvBA","names":["data","rolelist","setRightDialogVisible","rightslist","treeProps","label","children","defKeys","roleId","created","methods","getRolesList","res","console","removeRightById","role","rightId","confirmButtonText","cancelButtonText","type","catch","confirmResult","showSetRightDialog","getLeafKeys","node","arr","setRightDialogClosed","allotRights","keys","idStr","rids"],"sourceRoot":"src/components/power","sources":["Roles.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>权限管理</el-breadcrumb-item>\n      <el-breadcrumb-item>角色列表</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图 -->\n    <el-card>\n      <!-- 添加角色按钮区域 -->\n      <el-row>\n        <el-col>\n          <el-button type=\"primary\">添加角色</el-button>\n        </el-col>\n      </el-row>\n\n      <!-- 角色列表区域 -->\n      <el-table :data=\"rolelist\" border stripe>\n        <!-- 展开列 -->\n        <el-table-column type=\"expand\">\n          <template slot-scope=\"scope\">\n            <el-row :class=\"['bdbottom', i1 === 0 ? 'bdtop' : '', 'vcenter']\" v-for=\"(item1, i1) in scope.row.children\" :key=\"item1.id\">\n              <!-- 渲染一级权限 -->\n              <el-col :span=\"5\">\n                <el-tag closable @close=\"removeRightById(scope.row, item1.id)\">{{item1.authName}}</el-tag>\n                <i class=\"el-icon-caret-right\"></i>\n              </el-col>\n              <!-- 渲染二级和三级权限 -->\n              <el-col :span=\"19\">\n                <!-- 通过 for 循环 嵌套渲染二级权限 -->\n                <el-row :class=\"[i2 === 0 ? '' : 'bdtop', 'vcenter']\" v-for=\"(item2, i2) in item1.children\" :key=\"item2.id\">\n                  <el-col :span=\"6\">\n                    <el-tag type=\"success\" closable @close=\"removeRightById(scope.row, item2.id)\">{{item2.authName}}</el-tag>\n                    <i class=\"el-icon-caret-right\"></i>\n                  </el-col>\n                  <el-col :span=\"18\">\n                    <el-tag type=\"warning\" v-for=\"(item3, i3) in item2.children\" :key=\"item3.id\" closable @close=\"removeRightById(scope.row, item3.id)\">{{item3.authName}}</el-tag>\n                  </el-col>\n                </el-row>\n              </el-col>\n            </el-row>\n\n            <!-- <pre>\n              {{scope.row}}\n            </pre> -->\n          </template>\n        </el-table-column>\n        <!-- 索引列 -->\n        <el-table-column type=\"index\"></el-table-column>\n        <el-table-column label=\"角色名称\" prop=\"roleName\"></el-table-column>\n        <el-table-column label=\"角色描述\" prop=\"roleDesc\"></el-table-column>\n        <el-table-column label=\"操作\" width=\"300px\">\n          <template slot-scope=\"scope\">\n            <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\">编辑</el-button>\n            <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\">删除</el-button>\n            <el-button size=\"mini\" type=\"warning\" icon=\"el-icon-setting\" @click=\"showSetRightDialog(scope.row)\">分配权限</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!-- 分配权限的对话框 -->\n    <el-dialog title=\"分配权限\" :visible.sync=\"setRightDialogVisible\" width=\"50%\" @close=\"setRightDialogClosed\">\n      <!-- 树形控件 -->\n      <el-tree :data=\"rightslist\" :props=\"treeProps\" show-checkbox node-key=\"id\" default-expand-all :default-checked-keys=\"defKeys\" ref=\"treeRef\"></el-tree>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"setRightDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"allotRights\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 所有角色列表数据\n      rolelist: [],\n      // 控制分配权限对话框的显示与隐藏\n      setRightDialogVisible: false,\n      // 所有权限的数据\n      rightslist: [],\n      // 树形控件的属性绑定对象\n      treeProps: {\n        label: 'authName',\n        children: 'children'\n      },\n      // 默认选中的节点Id值数组\n      defKeys: [],\n      // 当前即将分配权限的角色id\n      roleId: ''\n    }\n  },\n  created() {\n    this.getRolesList()\n  },\n  methods: {\n    // 获取所有角色的列表\n    async getRolesList() {\n      const { data: res } = await this.$http.get('roles')\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取角色列表失败！')\n      }\n\n      this.rolelist = res.data\n\n      console.log(this.rolelist)\n    },\n    // 根据Id删除对应的权限\n    async removeRightById(role, rightId) {\n      // 弹框提示用户是否要删除\n      const confirmResult = await this.$confirm(\n        '此操作将永久删除该文件, 是否继续?',\n        '提示',\n        {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }\n      ).catch(err => err)\n\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('取消了删除！')\n      }\n\n      const { data: res } = await this.$http.delete(\n        `roles/${role.id}/rights/${rightId}`\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('删除权限失败！')\n      }\n\n      // this.getRolesList()\n      role.children = res.data\n    },\n    // 展示分配权限的对话框\n    async showSetRightDialog(role) {\n      this.roleId = role.id\n      // 获取所有权限的数据\n      const { data: res } = await this.$http.get('rights/tree')\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取权限数据失败！')\n      }\n\n      // 把获取到的权限数据保存到 data 中\n      this.rightslist = res.data\n      console.log(this.rightslist)\n\n      // 递归获取三级节点的Id\n      this.getLeafKeys(role, this.defKeys)\n\n      this.setRightDialogVisible = true\n    },\n    // 通过递归的形式，获取角色下所有三级权限的id，并保存到 defKeys 数组中\n    getLeafKeys(node, arr) {\n      // 如果当前 node 节点不包含 children 属性，则是三级节点\n      if (!node.children) {\n        return arr.push(node.id)\n      }\n\n      node.children.forEach(item => this.getLeafKeys(item, arr))\n    },\n    // 监听分配权限对话框的关闭事件\n    setRightDialogClosed() {\n      this.defKeys = []\n    },\n    // 点击为角色分配权限\n    async allotRights() {\n      const keys = [\n        ...this.$refs.treeRef.getCheckedKeys(),\n        ...this.$refs.treeRef.getHalfCheckedKeys()\n      ]\n\n      const idStr = keys.join(',')\n\n      const { data: res } = await this.$http.post(\n        `roles/${this.roleId}/rights`,\n        { rids: idStr }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('分配权限失败！')\n      }\n\n      this.$message.success('分配权限成功！')\n      this.getRolesList()\n      this.setRightDialogVisible = false\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.el-tag {\n  margin: 7px;\n}\n\n.bdtop {\n  border-top: 1px solid #eee;\n}\n\n.bdbottom {\n  border-bottom: 1px solid #eee;\n}\n\n.vcenter {\n  display: flex;\n  align-items: center;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}