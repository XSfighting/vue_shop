{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      // 查询条件\n      querInfo: {\n        type: 3,\n        pagenum: 1,\n        pagesize: 5\n      },\n      // 商品分类的数据列表，默认为空\n      catelist: [],\n      // 总数据条数\n      total: 0,\n      // 为table指定列的定义\n      columns: [{\n        label: '分类名称',\n        prop: 'cat_name'\n      }, {\n        label: '是否有效',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'isok'\n      }, {\n        label: '排序',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'order'\n      }, {\n        label: '操作',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'opt'\n      }],\n      // 控制添加分类对话框的显示与隐藏\n      addCateDialogVisible: false,\n      // 添加分类的表单数据对象\n      addCateForm: {\n        // 将要添加的分类的名称\n        cat_name: '',\n        // 父级分类的Id\n        cat_pid: 0,\n        // 分类的等级，默认要添加的是1级分类\n        cat_level: 0\n      },\n      // 添加分类表单的验证规则对象\n      addCateFormRules: {\n        cat_name: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }]\n      },\n      // 父级分类的列表\n      parentCateList: [],\n      editCateForm: {},\n      editCateDialogVisible: false,\n      // 指定级联选择器的配置对象\n      cascaderProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 选中的父级分类的Id数组\n      selectedKeys: []\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取商品分类数据\n    getCateList: function getCateList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('categories', {\n                  params: _this.querInfo\n                });\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取商品分类失败！'));\n\n              case 6:\n                console.log(res.data); // 把数据列表，赋值给 catelist\n\n                _this.catelist = res.data.result; // 为总数据条数赋值\n\n                _this.total = res.data.total;\n                console.log(res);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 监听 pagesize 改变\n    handleSizeChange: function handleSizeChange(newSize) {\n      this.querInfo.pagesize = newSize;\n      this.getCateList();\n    },\n    // 监听 pagenum 改变\n    handleCurrentChange: function handleCurrentChange(newPage) {\n      this.querInfo.pagenum = newPage;\n      this.getCateList();\n    },\n    // 点击按钮，展示添加分类的对话框\n    showAddCateDialog: function showAddCateDialog() {\n      // 先获取父级分类的数据列表\n      this.getParentCateList(); // 再展示出对话框\n\n      this.addCateDialogVisible = true;\n    },\n    // 获取父级分类的数据列表\n    getParentCateList: function getParentCateList() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this2.$http.get('categories', {\n                  params: {\n                    type: 2\n                  }\n                });\n\n              case 2:\n                _yield$_this2$$http$g = _context2.sent;\n                res = _yield$_this2$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error('获取父级分类数据失败！'));\n\n              case 6:\n                console.log(res.data);\n                _this2.parentCateList = res.data;\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 选择项发生变化触发这个函数\n    parentCateChanged: function parentCateChanged() {\n      console.log(this.selectedKeys); // 如果 selectedKeys 数组中的 length 大于0，证明选中的父级分类\n      // 反之，就说明没有选中任何父级分类\n\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1]; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = this.selectedKeys.length;\n      } else {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = 0; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = 0;\n      }\n    },\n    // 点击按钮，添加新的分类\n    addCate: function addCate() {\n      var _this3 = this;\n\n      this.$refs.addCateFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var _yield$_this3$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this3.$http.post('categories', _this3.addCateForm);\n\n                case 4:\n                  _yield$_this3$$http$p = _context3.sent;\n                  res = _yield$_this3$$http$p.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this3.$message.error('添加分类失败！'));\n\n                case 8:\n                  _this3.$message.success('添加分类成功！');\n\n                  _this3.getCateList();\n\n                  _this3.addCateDialogVisible = false;\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 监听对话框的关闭事件，重置表单数据\n    addCateDialogClosed: function addCateDialogClosed() {\n      this.$refs.addCateFormRef.resetFields();\n      this.selectedKeys = [];\n      this.addCateForm.cat_level = 0;\n      this.addCateForm.cat_pid = 0;\n    }\n  },\n  editCateDialogClosed: function editCateDialogClosed() {\n    this.$refs.addCateFormRef.resetFields();\n  },\n  showEditCatForm: function showEditCatForm(id) {\n    var _this4 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n      var _yield$_this4$$http$g, res;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this4.$http.get('categories/' + id);\n\n            case 2:\n              _yield$_this4$$http$g = _context4.sent;\n              res = _yield$_this4$$http$g.data;\n\n              if (!(res.meta.status !== 200)) {\n                _context4.next = 6;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", _this4.$message.error('查询分类失败！'));\n\n            case 6:\n              _this4.editCateForm = res.data;\n              _this4.editCateDialogVisible = true;\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  EditCate: function EditCate() {\n    var _this5 = this;\n\n    this.$refs.editCateFormRef.validate( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(valid) {\n        var _yield$_this5$$http$p, res;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (valid) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                _context5.next = 4;\n                return _this5.$http.put('categories/' + _this5.editCateForm.cat_id, {\n                  cat_name: _this5.editCateForm.cat_name\n                });\n\n              case 4:\n                _yield$_this5$$http$p = _context5.sent;\n                res = _yield$_this5$$http$p.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _this5.$message.error('更新失败！'));\n\n              case 8:\n                _this5.getCateList();\n\n                _this5.editCateDialogVisible = false;\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  },\n  removeCatById: function removeCatById(id) {\n    var _this6 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n      var confirmResult, _yield$_this6$$http$d, res;\n\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _this6.$confirm('此操作将永久删除该分类, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n              }).catch(function (err) {\n                return err;\n              });\n\n            case 2:\n              confirmResult = _context6.sent;\n\n              if (!(confirmResult !== 'confirm')) {\n                _context6.next = 5;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", _this6.$message.info('已取消删除'));\n\n            case 5:\n              _context6.next = 7;\n              return _this6.$http.delete('categories/' + id);\n\n            case 7:\n              _yield$_this6$$http$d = _context6.sent;\n              res = _yield$_this6$$http$d.data;\n\n              if (!(res.meta.status !== 200)) {\n                _context6.next = 11;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", _this6.$message.error('删除分类失败！'));\n\n            case 11:\n              _this6.$message.success('删除分类成功！');\n\n              _this6.getCateList();\n\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  }\n};","map":{"version":3,"mappings":"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","names":["data","querInfo","type","pagenum","pagesize","catelist","total","columns","label","prop","template","addCateDialogVisible","addCateForm","cat_name","cat_pid","cat_level","addCateFormRules","required","message","trigger","parentCateList","editCateForm","editCateDialogVisible","cascaderProps","value","children","selectedKeys","created","methods","getCateList","params","res","console","handleSizeChange","newSize","handleCurrentChange","newPage","showAddCateDialog","getParentCateList","parentCateChanged","addCate","valid","addCateDialogClosed","editCateDialogClosed","showEditCatForm","id","EditCate","removeCatById","confirmButtonText","cancelButtonText","catch","confirmResult"],"sourceRoot":"src/components/goods","sources":["Cate.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图区域 -->\n    <el-card>\n      <el-row>\n        <el-col>\n          <el-button type=\"primary\" @click=\"showAddCateDialog\">添加分类</el-button>\n        </el-col>\n      </el-row>\n\n      <!-- 表格 -->\n      <tree-table class=\"treeTable\" :data=\"catelist\" :columns=\"columns\" :selection-type=\"false\" :expand-type=\"false\" show-index index-text=\"#\" border>\n        <!-- 是否有效 -->\n        <template slot=\"isok\" slot-scope=\"scope\">\n          <i class=\"el-icon-success\" v-if=\"scope.row.cat_deleted === false\" style=\"color: lightgreen;\"></i>\n          <i class=\"el-icon-error\" v-else style=\"color: red;\"></i>\n        </template>\n        <!-- 排序 -->\n        <template slot=\"order\" slot-scope=\"scope\">\n          <el-tag size=\"mini\" v-if=\"scope.row.cat_level===0\">一级</el-tag>\n          <el-tag type=\"success\" size=\"mini\" v-else-if=\"scope.row.cat_level===1\">二级</el-tag>\n          <el-tag type=\"warning\" size=\"mini\" v-else>三级</el-tag>\n        </template>\n        <!-- 操作 -->\n        <template slot=\"opt\" slot-scope=\"scope\">\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\">编辑</el-button>\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\">删除</el-button>\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"showEditCatForm(scope.row.cat_id)\">编辑</el-button>\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeCatById(scope.row.cat_id)\">删除</el-button>\n        </template>\n      </tree-table>\n\n      <!-- 分页区域 -->\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"querInfo.pagenum\" :page-sizes=\"[3, 5, 10, 15]\" :page-size=\"querInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\">\n      </el-pagination>\n    </el-card>\n\n    <!-- 添加分类的对话框 -->\n    <el-dialog title=\"添加分类\" :visible.sync=\"addCateDialogVisible\" width=\"50%\" @close=\"addCateDialogClosed\">\n      <!-- 添加分类的表单 -->\n      <el-form :model=\"addCateForm\" :rules=\"addCateFormRules\" ref=\"addCateFormRef\" label-width=\"100px\">\n        <el-form-item label=\"分类名称：\" prop=\"cat_name\">\n          <el-input v-model=\"addCateForm.cat_name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"父级分类：\">\n          <!-- options 用来指定数据源 -->\n          <!-- props 用来指定配置对象 -->\n          <el-cascader expand-trigger=\"hover\" :options=\"parentCateList\" :props=\"cascaderProps\" v-model=\"selectedKeys\" @change=\"parentCateChanged\" clearable change-on-select >\n          </el-cascader>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addCateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addCate\">确 定</el-button>\n      </span>\n    </el-dialog>\n    <!-- 修改分类的对话框 -->\n    <el-dialog title=\"修改分类\" :visible.sync=\"editCateDialogVisible\" width=\"50%\" @close=\"editCateDialogClosed\">\n      <!-- 添加分类的表单 -->\n      <el-form :model=\"editCateForm\" :rules=\"addCateFormRules\" ref=\"editCateFormRef\" label-width=\"100px\">\n        <el-form-item label=\"分类名称：\" prop=\"cat_name\">\n          <el-input v-model=\"editCateForm.cat_name\"></el-input>\n        </el-form-item>\n\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editCateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"EditCate\">确 定</el-button>\n      </span>\n    </el-dialog>\n>>>>>>> goods_params\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 查询条件\n      querInfo: {\n        type: 3,\n        pagenum: 1,\n        pagesize: 5\n      },\n      // 商品分类的数据列表，默认为空\n      catelist: [],\n      // 总数据条数\n      total: 0,\n      // 为table指定列的定义\n      columns: [\n        {\n          label: '分类名称',\n          prop: 'cat_name'\n        },\n        {\n          label: '是否有效',\n          // 表示，将当前列定义为模板列\n          type: 'template',\n          // 表示当前这一列使用模板名称\n          template: 'isok'\n        },\n        {\n          label: '排序',\n          // 表示，将当前列定义为模板列\n          type: 'template',\n          // 表示当前这一列使用模板名称\n          template: 'order'\n        },\n        {\n          label: '操作',\n          // 表示，将当前列定义为模板列\n          type: 'template',\n          // 表示当前这一列使用模板名称\n          template: 'opt'\n        }\n      ],\n      // 控制添加分类对话框的显示与隐藏\n      addCateDialogVisible: false,\n      // 添加分类的表单数据对象\n      addCateForm: {\n        // 将要添加的分类的名称\n        cat_name: '',\n        // 父级分类的Id\n        cat_pid: 0,\n        // 分类的等级，默认要添加的是1级分类\n        cat_level: 0\n      },\n      // 添加分类表单的验证规则对象\n      addCateFormRules: {\n        cat_name: [\n          {required: true, message: '请输入分类名称', trigger: 'blur'}\n        ]\n      },\n      // 父级分类的列表\n      parentCateList: [],\n      editCateForm: {},\n      editCateDialogVisible: false,\n      // 指定级联选择器的配置对象\n      cascaderProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 选中的父级分类的Id数组\n      selectedKeys: []\n    }\n  },\n  created() {\n    this.getCateList()\n  },\n  methods: {\n    // 获取商品分类数据\n    async getCateList() {\n      const {data: res} = await this.$http.get('categories', {\n        params: this.querInfo\n      })\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品分类失败！')\n      }\n\n      console.log(res.data)\n      // 把数据列表，赋值给 catelist\n      this.catelist = res.data.result\n      // 为总数据条数赋值\n      this.total = res.data.total\n      console.log(res);\n    },\n    // 监听 pagesize 改变\n    handleSizeChange(newSize) {\n      this.querInfo.pagesize = newSize\n      this.getCateList()\n    },\n    // 监听 pagenum 改变\n    handleCurrentChange(newPage) {\n      this.querInfo.pagenum = newPage\n      this.getCateList()\n    },\n    // 点击按钮，展示添加分类的对话框\n    showAddCateDialog() {\n      // 先获取父级分类的数据列表\n      this.getParentCateList()\n      // 再展示出对话框\n      this.addCateDialogVisible = true\n    },\n    // 获取父级分类的数据列表\n    async getParentCateList() {\n      const {data: res} = await this.$http.get('categories', {\n        params: {type: 2}\n      })\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取父级分类数据失败！')\n      }\n\n      console.log(res.data)\n      this.parentCateList = res.data\n    },\n    // 选择项发生变化触发这个函数\n    parentCateChanged() {\n      console.log(this.selectedKeys)\n      // 如果 selectedKeys 数组中的 length 大于0，证明选中的父级分类\n      // 反之，就说明没有选中任何父级分类\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = this.selectedKeys[\n        this.selectedKeys.length - 1\n            ]\n        // 为当前分类的等级赋值\n        this.addCateForm.cat_level = this.selectedKeys.length\n      } else {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = 0\n        // 为当前分类的等级赋值\n        this.addCateForm.cat_level = 0\n      }\n    },\n    // 点击按钮，添加新的分类\n    addCate() {\n      this.$refs.addCateFormRef.validate(async valid => {\n        if (!valid) return\n        const {data: res} = await this.$http.post('categories', this.addCateForm)\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加分类失败！')\n        }\n        this.$message.success('添加分类成功！')\n        this.getCateList()\n        this.addCateDialogVisible = false\n      })\n    },\n    // 监听对话框的关闭事件，重置表单数据\n    addCateDialogClosed() {\n      this.$refs.addCateFormRef.resetFields()\n      this.selectedKeys = []\n      this.addCateForm.cat_level = 0\n      this.addCateForm.cat_pid = 0\n    }\n  },\n  editCateDialogClosed() {\n    this.$refs.addCateFormRef.resetFields()\n  },\n  async showEditCatForm(id) {\n    const {data: res} = await this.$http.get('categories/' + id)\n    if (res.meta.status !== 200) return this.$message.error('查询分类失败！')\n    this.editCateForm = res.data\n    this.editCateDialogVisible = true\n  },\n  EditCate() {\n    this.$refs.editCateFormRef.validate(async valid => {\n      if (!valid) return\n      const {data: res} = await this.$http.put('categories/' + this.editCateForm.cat_id, {\n        cat_name: this.editCateForm.cat_name\n      })\n      if (res.meta.status !== 200) return this.$message.error('更新失败！')\n      this.getCateList()\n      this.editCateDialogVisible = false\n\n    })\n  },\n  async removeCatById(id) {\n    const confirmResult = await this.$confirm('此操作将永久删除该分类, 是否继续?', '提示', {\n      confirmButtonText: '确定',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).catch(err => err)\n    if (confirmResult !== 'confirm') {\n      return this.$message.info('已取消删除')\n    }\n    const {data: res} = await this.$http.delete('categories/' + id)\n    if (res.meta.status !== 200) return this.$message.error('删除分类失败！')\n    this.$message.success('删除分类成功！')\n    this.getCateList()\n  }\n  }\n</script>\n\n<style scoped>\n.treeTable {\n  margin-top: 15px;\n}\n\n.el-cascader {\n  width: 100%;\n}\n</style>"]},"metadata":{},"sourceType":"module"}