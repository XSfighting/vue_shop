{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nexport default {\n  data: function data() {\n    return {\n      activeIndex: '0',\n      // 添加商品的表单数据对象\n      addForm: {\n        goods_name: '',\n        goods_price: 0,\n        goods_weight: 0,\n        goods_number: 0,\n        // 商品所属的分类数组\n        goods_cat: [],\n        // 图片的数组\n        pics: [],\n        // 商品的详情描述\n        goods_introduce: '',\n        attrs: []\n      },\n      addFormRules: {\n        goods_name: [{\n          required: true,\n          message: '请输入商品名称',\n          trigger: 'blur'\n        }],\n        goods_price: [{\n          required: true,\n          message: '请输入商品价格',\n          trigger: 'blur'\n        }],\n        goods_weight: [{\n          required: true,\n          message: '请输入商品重量',\n          trigger: 'blur'\n        }],\n        goods_number: [{\n          required: true,\n          message: '请输入商品数量',\n          trigger: 'blur'\n        }],\n        goods_cat: [{\n          required: true,\n          message: '请选择商品分类',\n          trigger: 'blur'\n        }]\n      },\n      // 商品分类列表\n      catelist: [],\n      cateProps: {\n        label: 'cat_name',\n        value: 'cat_id',\n        children: 'children'\n      },\n      // 动态参数列表数据\n      manyTableData: [],\n      // 静态属性列表数据\n      onlyTableData: [],\n      // 上传图片的URL地址\n      uploadURL: 'http://127.0.0.1:8888/api/private/v1/upload',\n      // 图片上传组件的headers请求头对象\n      headerObj: {\n        Authorization: window.sessionStorage.getItem('token')\n      },\n      previewPath: '',\n      previewVisible: false\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取所有商品分类数据\n    getCateList: function getCateList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('categories');\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取商品分类数据失败！'));\n\n              case 6:\n                _this.catelist = res.data;\n                console.log(_this.catelist);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 级联选择器选中项变化，会触发这个函数\n    handleChange: function handleChange() {\n      console.log(this.addForm.goods_cat);\n\n      if (this.addForm.goods_cat.length !== 3) {\n        this.addForm.goods_cat = [];\n      }\n    },\n    beforeTabLeave: function beforeTabLeave(activeName, oldActiveName) {\n      // console.log('即将离开的标签页名字是：' + oldActiveName)\n      // console.log('即将进入的标签页名字是：' + activeName)\n      // return false\n      if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\n        this.$message.error('请先选择商品分类！');\n        return false;\n      }\n    },\n    tabClicked: function tabClicked() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$g, res, _yield$_this2$$http$g2, _res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this2.activeIndex === '1')) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _this2.$http.get(\"categories/\".concat(_this2.cateId, \"/attributes\"), {\n                  params: {\n                    sel: 'many'\n                  }\n                });\n\n              case 3:\n                _yield$_this2$$http$g = _context2.sent;\n                res = _yield$_this2$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error('获取动态参数列表失败！'));\n\n              case 7:\n                console.log(res.data);\n                res.data.forEach(function (item) {\n                  item.attr_vals = item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ');\n                });\n                _this2.manyTableData = res.data;\n                _context2.next = 21;\n                break;\n\n              case 12:\n                if (!(_this2.activeIndex === '2')) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                _context2.next = 15;\n                return _this2.$http.get(\"categories/\".concat(_this2.cateId, \"/attributes\"), {\n                  params: {\n                    sel: 'only'\n                  }\n                });\n\n              case 15:\n                _yield$_this2$$http$g2 = _context2.sent;\n                _res = _yield$_this2$$http$g2.data;\n\n                if (!(_res.meta.status !== 200)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error('获取静态属性失败！'));\n\n              case 19:\n                console.log(_res.data);\n                _this2.onlyTableData = _res.data;\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 处理图片预览效果\n    handlePreview: function handlePreview(file) {\n      console.log(file);\n      this.previewPath = file.response.data.url;\n      this.previewVisible = true;\n    },\n    // 处理移除图片的操作\n    handleRemove: function handleRemove(file) {\n      // console.log(file)\n      // 1. 获取将要删除的图片的临时路径\n      var filePath = file.response.data.tmp_path; // 2. 从 pics 数组中，找到这个图片对应的索引值\n\n      var i = this.addForm.pics.findIndex(function (x) {\n        return x.pic === filePath;\n      }); // 3. 调用数组的 splice 方法，把图片信息对象，从 pics 数组中移除\n\n      this.addForm.pics.splice(i, 1);\n      console.log(this.addForm);\n    },\n    // 监听图片上传成功的事件\n    handleSuccess: function handleSuccess(response) {\n      console.log(response); // 1. 拼接得到一个图片信息对象\n\n      var picInfo = {\n        pic: response.data.tmp_path\n      }; // 2. 将图片信息对象，push 到pics数组中\n\n      this.addForm.pics.push(picInfo);\n      console.log(this.addForm);\n    },\n    // 添加商品\n    add: function add() {\n      var _this3 = this;\n\n      this.$refs.addFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var form, _yield$_this3$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this3.$message.error('请填写必要的表单项！'));\n\n                case 2:\n                  // 执行添加的业务逻辑\n                  // lodash   cloneDeep(obj)\n                  form = _.cloneDeep(_this3.addForm);\n                  form.goods_cat = form.goods_cat.join(','); // 处理动态参数\n\n                  _this3.manyTableData.forEach(function (item) {\n                    var newInfo = {\n                      attr_id: item.attr_id,\n                      attr_value: item.attr_vals.join(' ')\n                    };\n\n                    _this3.addForm.attrs.push(newInfo);\n                  }); // 处理静态属性\n\n\n                  _this3.onlyTableData.forEach(function (item) {\n                    var newInfo = {\n                      attr_id: item.attr_id,\n                      attr_value: item.attr_vals\n                    };\n\n                    _this3.addForm.attrs.push(newInfo);\n                  });\n\n                  form.attrs = _this3.addForm.attrs;\n                  console.log(form); // 发起请求添加商品\n                  // 商品的名称，必须是唯一的\n\n                  _context3.next = 10;\n                  return _this3.$http.post('goods', form);\n\n                case 10:\n                  _yield$_this3$$http$p = _context3.sent;\n                  res = _yield$_this3$$http$p.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 14;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this3.$message.error('添加商品失败！'));\n\n                case 14:\n                  _this3.$message.success('添加商品成功！');\n\n                  _this3.$router.push('/goods');\n\n                case 16:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  },\n  computed: {\n    cateId: function cateId() {\n      if (this.addForm.goods_cat.length === 3) {\n        return this.addForm.goods_cat[2];\n      }\n\n      return null;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["data","activeIndex","addForm","goods_name","goods_price","goods_weight","goods_number","goods_cat","pics","goods_introduce","attrs","addFormRules","required","message","trigger","catelist","cateProps","label","value","children","manyTableData","onlyTableData","uploadURL","headerObj","Authorization","previewPath","previewVisible","created","methods","getCateList","res","console","handleChange","beforeTabLeave","activeName","oldActiveName","tabClicked","params","sel","item","handlePreview","file","handleRemove","handleSuccess","response","pic","add","valid","form","_","attr_id","attr_value","computed","cateId"],"sourceRoot":"src/components/goods","sources":["Add.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>添加商品</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图 -->\n    <el-card>\n      <!-- 提示区域 -->\n      <el-alert title=\"添加商品信息\" type=\"info\" center show-icon :closable=\"false\">\n      </el-alert>\n      <!-- 步骤条区域 -->\n      <el-steps :space=\"200\" :active=\"activeIndex - 0\" finish-status=\"success\" align-center>\n        <el-step title=\"基本信息\"></el-step>\n        <el-step title=\"商品参数\"></el-step>\n        <el-step title=\"商品属性\"></el-step>\n        <el-step title=\"商品图片\"></el-step>\n        <el-step title=\"商品内容\"></el-step>\n        <el-step title=\"完成\"></el-step>\n      </el-steps>\n\n      <!-- tab栏区域 -->\n\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\" label-position=\"top\">\n        <el-tabs v-model=\"activeIndex\" :tab-position=\"'left'\" :before-leave=\"beforeTabLeave\" @tab-click=\"tabClicked\">\n          <el-tab-pane label=\"基本信息\" name=\"0\">\n            <el-form-item label=\"商品名称\" prop=\"goods_name\">\n              <el-input v-model=\"addForm.goods_name\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品价格\" prop=\"goods_price\">\n              <el-input v-model=\"addForm.goods_price\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品重量\" prop=\"goods_weight\">\n              <el-input v-model=\"addForm.goods_weight\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品数量\" prop=\"goods_number\">\n              <el-input v-model=\"addForm.goods_number\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品分类\" prop=\"goods_cat\">\n              <el-cascader expand-trigger=\"hover\" :options=\"catelist\" :props=\"cateProps\" v-model=\"addForm.goods_cat\" @change=\"handleChange\">\n              </el-cascader>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品参数\" name=\"1\">\n            <!-- 渲染表单的Item项 -->\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in manyTableData\" :key=\"item.attr_id\">\n              <!-- 复选框组 -->\n              <el-checkbox-group v-model=\"item.attr_vals\">\n                <el-checkbox :label=\"cb\" v-for=\"(cb, i) in item.attr_vals\" :key=\"i\" border></el-checkbox>\n              </el-checkbox-group>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品属性\" name=\"2\">\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in onlyTableData\" :key=\"item.attr_id\">\n              <el-input v-model=\"item.attr_vals\"></el-input>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品图片\" name=\"3\">\n            <!-- action 表示图片要上传到的后台API地址 -->\n            <el-upload :action=\"uploadURL\" :on-preview=\"handlePreview\" :on-remove=\"handleRemove\" list-type=\"picture\" :headers=\"headerObj\" :on-success=\"handleSuccess\">\n              <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n            </el-upload>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品内容\" name=\"4\">\n            <!-- 富文本编辑器组件 -->\n            <quill-editor v-model=\"addForm.goods_introduce\"></quill-editor>\n            <!-- 添加商品的按钮 -->\n            <el-button type=\"primary\" class=\"btnAdd\" @click=\"add\">添加商品</el-button>\n          </el-tab-pane>\n        </el-tabs>\n      </el-form>\n\n    </el-card>\n\n    <!-- 图片预览 -->\n    <el-dialog title=\"图片预览\" :visible.sync=\"previewVisible\" width=\"50%\">\n      <img :src=\"previewPath\" alt=\"\" class=\"previewImg\">\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport _ from 'lodash'\n\nexport default {\n  data() {\n    return {\n      activeIndex: '0',\n      // 添加商品的表单数据对象\n      addForm: {\n        goods_name: '',\n        goods_price: 0,\n        goods_weight: 0,\n        goods_number: 0,\n        // 商品所属的分类数组\n        goods_cat: [],\n        // 图片的数组\n        pics: [],\n        // 商品的详情描述\n        goods_introduce: '',\n        attrs: []\n      },\n      addFormRules: {\n        goods_name: [\n          { required: true, message: '请输入商品名称', trigger: 'blur' }\n        ],\n        goods_price: [\n          { required: true, message: '请输入商品价格', trigger: 'blur' }\n        ],\n        goods_weight: [\n          { required: true, message: '请输入商品重量', trigger: 'blur' }\n        ],\n        goods_number: [\n          { required: true, message: '请输入商品数量', trigger: 'blur' }\n        ],\n        goods_cat: [\n          { required: true, message: '请选择商品分类', trigger: 'blur' }\n        ]\n      },\n      // 商品分类列表\n      catelist: [],\n      cateProps: {\n        label: 'cat_name',\n        value: 'cat_id',\n        children: 'children'\n      },\n      // 动态参数列表数据\n      manyTableData: [],\n      // 静态属性列表数据\n      onlyTableData: [],\n      // 上传图片的URL地址\n      uploadURL: 'http://127.0.0.1:8888/api/private/v1/upload',\n      // 图片上传组件的headers请求头对象\n      headerObj: {\n        Authorization: window.sessionStorage.getItem('token')\n      },\n      previewPath: '',\n      previewVisible: false\n    }\n  },\n  created() {\n    this.getCateList()\n  },\n  methods: {\n    // 获取所有商品分类数据\n    async getCateList() {\n      const { data: res } = await this.$http.get('categories')\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品分类数据失败！')\n      }\n\n      this.catelist = res.data\n      console.log(this.catelist)\n    },\n    // 级联选择器选中项变化，会触发这个函数\n    handleChange() {\n      console.log(this.addForm.goods_cat)\n      if (this.addForm.goods_cat.length !== 3) {\n        this.addForm.goods_cat = []\n      }\n    },\n    beforeTabLeave(activeName, oldActiveName) {\n      // console.log('即将离开的标签页名字是：' + oldActiveName)\n      // console.log('即将进入的标签页名字是：' + activeName)\n      // return false\n      if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\n        this.$message.error('请先选择商品分类！')\n        return false\n      }\n    },\n    async tabClicked() {\n      // console.log(this.activeIndex)\n      // 证明访问的是动态参数面板\n      if (this.activeIndex === '1') {\n        const { data: res } = await this.$http.get(\n          `categories/${this.cateId}/attributes`,\n          {\n            params: { sel: 'many' }\n          }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取动态参数列表失败！')\n        }\n\n        console.log(res.data)\n        res.data.forEach(item => {\n          item.attr_vals =\n            item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ')\n        })\n        this.manyTableData = res.data\n      } else if (this.activeIndex === '2') {\n        const { data: res } = await this.$http.get(\n          `categories/${this.cateId}/attributes`,\n          {\n            params: { sel: 'only' }\n          }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取静态属性失败！')\n        }\n\n        console.log(res.data)\n        this.onlyTableData = res.data\n      }\n    },\n    // 处理图片预览效果\n    handlePreview(file) {\n      console.log(file)\n      this.previewPath = file.response.data.url\n      this.previewVisible = true\n    },\n    // 处理移除图片的操作\n    handleRemove(file) {\n      // console.log(file)\n      // 1. 获取将要删除的图片的临时路径\n      const filePath = file.response.data.tmp_path\n      // 2. 从 pics 数组中，找到这个图片对应的索引值\n      const i = this.addForm.pics.findIndex(x => x.pic === filePath)\n      // 3. 调用数组的 splice 方法，把图片信息对象，从 pics 数组中移除\n      this.addForm.pics.splice(i, 1)\n      console.log(this.addForm)\n    },\n    // 监听图片上传成功的事件\n    handleSuccess(response) {\n      console.log(response)\n      // 1. 拼接得到一个图片信息对象\n      const picInfo = { pic: response.data.tmp_path }\n      // 2. 将图片信息对象，push 到pics数组中\n      this.addForm.pics.push(picInfo)\n      console.log(this.addForm)\n    },\n    // 添加商品\n    add() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) {\n          return this.$message.error('请填写必要的表单项！')\n        }\n        // 执行添加的业务逻辑\n        // lodash   cloneDeep(obj)\n        const form = _.cloneDeep(this.addForm)\n        form.goods_cat = form.goods_cat.join(',')\n        // 处理动态参数\n        this.manyTableData.forEach(item => {\n          const newInfo = {\n            attr_id: item.attr_id,\n            attr_value: item.attr_vals.join(' ')\n          }\n          this.addForm.attrs.push(newInfo)\n        })\n        // 处理静态属性\n        this.onlyTableData.forEach(item => {\n          const newInfo = { attr_id: item.attr_id, attr_value: item.attr_vals }\n          this.addForm.attrs.push(newInfo)\n        })\n        form.attrs = this.addForm.attrs\n        console.log(form)\n\n        // 发起请求添加商品\n        // 商品的名称，必须是唯一的\n        const { data: res } = await this.$http.post('goods', form)\n\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加商品失败！')\n        }\n\n        this.$message.success('添加商品成功！')\n        this.$router.push('/goods')\n      })\n    }\n  },\n  computed: {\n    cateId() {\n      if (this.addForm.goods_cat.length === 3) {\n        return this.addForm.goods_cat[2]\n      }\n      return null\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.el-checkbox {\n  margin: 0 10px 0 0 !important;\n}\n\n.previewImg {\n  width: 100%;\n}\n\n.btnAdd {\n  margin-top: 15px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}