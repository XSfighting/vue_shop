{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 1.  导入echarts\nimport * as echarts from 'echarts';\nimport _ from 'lodash';\nexport default {\n  name: \"Report\",\n  data: function data() {\n    return {\n      // 需要合并的数据\n      options: {\n        title: {\n          text: '用户来源'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#E9EEF3'\n            }\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          boundaryGap: false\n        }],\n        yAxis: [{\n          type: 'value'\n        }]\n      }\n    };\n  },\n  created: function created() {},\n  // 此时页面上的元素已经被渲染完毕了！\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var myChart, _yield$_this$$http$ge, res, result;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // 3.基于准备好的dom，初始化echarts实例\n              myChart = echarts.init(document.getElementById('main'));\n              _context.next = 3;\n              return _this.$http.get('reports/type/1');\n\n            case 3:\n              _yield$_this$$http$ge = _context.sent;\n              res = _yield$_this$$http$ge.data;\n\n              if (!(res.meta.status !== 200)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _this.$message.error('获取折线图数据失败！'));\n\n            case 7:\n              // 4. 准备数据和配置项\n              result = _.merge(res.data, _this.options); // 5. 展示数据\n\n              myChart.setOption(result);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {}\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;EACAA,cADA;EAEAC,IAFA,kBAEA;IACA;MACA;MACAC;QACAC;UACAC;QADA,CADA;QAIAC;UACAC,eADA;UAEAC;YACAC,aADA;YAEAC;cACAC;YADA;UAFA;QAFA,CAJA;QAaAC;UACAC,UADA;UAEAC,WAFA;UAGAC,YAHA;UAIAC;QAJA,CAbA;QAmBAC,QACA;UACAC;QADA,CADA,CAnBA;QAwBAC,QACA;UACAV;QADA,CADA;MAxBA;IAFA;EAkCA,CArCA;EAsCAW,OAtCA,qBAsCA,CACA,CAvCA;EAwCA;EACAC,OAzCA,qBAyCA;IAAA;;IAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cACA;cACAC,OAFA,GAEAC,6CAFA;cAAA;cAAA,OAIA,iCAJA;;YAAA;cAAA;cAIAC,GAJA,yBAIAtB,IAJA;;cAAA,MAKAsB,uBALA;gBAAA;gBAAA;cAAA;;cAAA,iCAKA,kCALA;;YAAA;cAOA;cACAC,MARA,GAQAC,gCARA,EASA;;cACAJ;;YAVA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAWA,CApDA;EAqDAK;AArDA","names":["name","data","options","title","text","tooltip","trigger","axisPointer","type","label","backgroundColor","grid","left","right","bottom","containLabel","xAxis","boundaryGap","yAxis","created","mounted","myChart","echarts","res","result","_","methods"],"sourceRoot":"src/components/report","sources":["Report.vue"],"sourcesContent":["<template>\r\n<div>\r\n  <!-- 面包屑导航区域 -->\r\n  <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n    <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n    <el-breadcrumb-item>数据统计</el-breadcrumb-item>\r\n    <el-breadcrumb-item>数据报表</el-breadcrumb-item>\r\n  </el-breadcrumb>\r\n  <!-- 卡片视图区域 -->\r\n  <el-card>\r\n    <!-- 2. 为ECharts准备一个具备大小（宽高）的Dom -->\r\n    <div id=\"main\" style=\"width: 750px; height: 400px;\"></div>\r\n  </el-card>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// 1.  导入echarts\r\nimport * as echarts from 'echarts'\r\nimport _ from 'lodash'\r\nexport default {\r\n  name: \"Report\",\r\n  data() {\r\n    return {\r\n      // 需要合并的数据\r\n      options: {\r\n        title: {\r\n          text: '用户来源'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n              backgroundColor: '#E9EEF3'\r\n            }\r\n          }\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            boundaryGap: false\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value'\r\n          }\r\n        ]\r\n      }\r\n\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  // 此时页面上的元素已经被渲染完毕了！\r\n  async mounted() {\r\n    // 3.基于准备好的dom，初始化echarts实例\r\n    var myChart = echarts.init(document.getElementById('main'))\r\n\r\n   const {data: res} = await this.$http.get('reports/type/1')\r\n    if (res.meta.status !== 200) return this.$message.error('获取折线图数据失败！')\r\n\r\n    // 4. 准备数据和配置项\r\n   const result = _.merge(res.data,this.options)\r\n    // 5. 展示数据\r\n    myChart.setOption(result);\r\n  },\r\n  methods: {\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}