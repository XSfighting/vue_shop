{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    // 验证邮箱的规则\n    var checkEmail = function checkEmail(rule, value, cb) {\n      // 验证邮箱的正则表达式\n      var regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/;\n\n      if (regEmail.test(value)) {\n        // 合法的邮箱\n        return cb();\n      }\n\n      cb(new Error('请输入合法的邮箱'));\n    }; // 验证手机号的规则\n\n\n    var checkMobile = function checkMobile(rule, value, cb) {\n      // 验证手机号的正则表达式\n      var regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\n\n      if (regMobile.test(value)) {\n        return cb();\n      }\n\n      cb(new Error('请输入合法的手机号'));\n    };\n\n    return {\n      // 获取用户列表的参数对象\n      queryInfo: {\n        query: '',\n        // 当前的页数\n        pagenum: 1,\n        // 当前每页显示多少条数据\n        pagesize: 2\n      },\n      userlist: [],\n      total: 0,\n      // 控制添加用户对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加用户的表单数据\n      addForm: {\n        username: '',\n        password: '',\n        email: '',\n        mobile: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '用户名的长度在3~10个字符之间',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 15,\n          message: '用户名的长度在6~15个字符之间',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '请输入邮箱',\n          trigger: 'blur'\n        }, {\n          validator: checkEmail,\n          trigger: 'blur'\n        }],\n        mobile: [{\n          required: true,\n          message: '请输入手机号',\n          trigger: 'blur'\n        }, {\n          validator: checkMobile,\n          trigger: 'blur'\n        }]\n      },\n      // 控制修改用户对话框的显示与隐藏\n      editDialogVisible: false,\n      // 查询到的用户信息对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        email: [{\n          required: true,\n          message: '请输入用户邮箱',\n          trigger: 'blur'\n        }, {\n          validator: checkEmail,\n          trigger: 'blur'\n        }],\n        mobile: [{\n          required: true,\n          message: '请输入用户手机',\n          trigger: 'blur'\n        }, {\n          validator: checkMobile,\n          trigger: 'blur'\n        }]\n      },\n      // 控制分配角色对话框的显示与隐藏\n      setRoleDialogVisible: false,\n      // 需要被分配角色的用户信息\n      userInfo: {},\n      // 所有角色的数据列表\n      rolesList: [],\n      // 已选中的角色Id值\n      selectedRoleId: ''\n    };\n  },\n  created: function created() {\n    this.getUserList();\n  },\n  methods: {\n    getUserList: function getUserList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('users', {\n                  params: _this.queryInfo\n                });\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取用户列表失败！'));\n\n              case 6:\n                _this.userlist = res.data.users;\n                _this.total = res.data.total;\n                console.log(res);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 监听 pagesize 改变的事件\n    handleSizeChange: function handleSizeChange(newSize) {\n      // console.log(newSize)\n      this.queryInfo.pagesize = newSize;\n      this.getUserList();\n    },\n    // 监听 页码值 改变的事件\n    handleCurrentChange: function handleCurrentChange(newPage) {\n      console.log(newPage);\n      this.queryInfo.pagenum = newPage;\n      this.getUserList();\n    },\n    // 监听 switch 开关状态的改变\n    userStateChanged: function userStateChanged(userinfo) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$p, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(userinfo);\n                _context2.next = 3;\n                return _this2.$http.put(\"users/\".concat(userinfo.id, \"/state/\").concat(userinfo.mg_state));\n\n              case 3:\n                _yield$_this2$$http$p = _context2.sent;\n                res = _yield$_this2$$http$p.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                userinfo.mg_state = !userinfo.mg_state;\n                return _context2.abrupt(\"return\", _this2.$message.error('更新用户状态失败！'));\n\n              case 8:\n                _this2.$message.success('更新用户状态成功！');\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 监听添加用户对话框的关闭事件\n    addDialogClosed: function addDialogClosed() {\n      this.$refs.addFormRef.resetFields();\n    },\n    // 点击按钮，添加新用户\n    addUser: function addUser() {\n      var _this3 = this;\n\n      this.$refs.addFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var _yield$_this3$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this3.$http.post('users', _this3.addForm);\n\n                case 4:\n                  _yield$_this3$$http$p = _context3.sent;\n                  res = _yield$_this3$$http$p.data;\n\n                  if (res.meta.status !== 201) {\n                    _this3.$message.error('添加用户失败！');\n                  }\n\n                  _this3.$message.success('添加用户成功！'); // 隐藏添加用户的对话框\n\n\n                  _this3.addDialogVisible = false; // 重新获取用户列表数据\n\n                  _this3.getUserList();\n\n                case 10:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 展示编辑用户的对话框\n    showEditDialog: function showEditDialog(id) {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var _yield$_this4$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this4.$http.get('users/' + id);\n\n              case 2:\n                _yield$_this4$$http$g = _context4.sent;\n                res = _yield$_this4$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _this4.$message.error('查询用户信息失败！'));\n\n              case 6:\n                _this4.editForm = res.data;\n                _this4.editDialogVisible = true;\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    // 监听修改用户对话框的关闭事件\n    editDialogClosed: function editDialogClosed() {\n      this.$refs.editFormRef.resetFields();\n    },\n    // 修改用户信息并提交\n    editUserInfo: function editUserInfo() {\n      var _this5 = this;\n\n      this.$refs.editFormRef.validate( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(valid) {\n          var _yield$_this5$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (valid) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 2:\n                  _context5.next = 4;\n                  return _this5.$http.put('users/' + _this5.editForm.id, {\n                    email: _this5.editForm.email,\n                    mobile: _this5.editForm.mobile\n                  });\n\n                case 4:\n                  _yield$_this5$$http$p = _context5.sent;\n                  res = _yield$_this5$$http$p.data;\n\n                  if (!(res.meta.status !== 200)) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", _this5.$message.error('更新用户信息失败！'));\n\n                case 8:\n                  // 关闭对话框\n                  _this5.editDialogVisible = false; // 刷新数据列表\n\n                  _this5.getUserList(); // 提示修改成功\n\n\n                  _this5.$message.success('更新用户信息成功！');\n\n                case 11:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    // 根据Id删除对应的用户信息\n    removeUserById: function removeUserById(id) {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var confirmResult, _yield$_this6$$http$d, res;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _this6.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context6.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _this6.$message.info('已取消删除'));\n\n              case 5:\n                _context6.next = 7;\n                return _this6.$http.delete('users/' + id);\n\n              case 7:\n                _yield$_this6$$http$d = _context6.sent;\n                res = _yield$_this6$$http$d.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _this6.$message.error('删除用户失败！'));\n\n              case 11:\n                _this6.$message.success('删除用户成功！');\n\n                _this6.getUserList();\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    // 展示分配角色的对话框\n    setRole: function setRole(userInfo) {\n      var _this7 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        var _yield$_this7$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this7.userInfo = userInfo; // 在展示对话框之前，获取所有角色的列表\n\n                _context7.next = 3;\n                return _this7.$http.get('roles');\n\n              case 3:\n                _yield$_this7$$http$g = _context7.sent;\n                res = _yield$_this7$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", _this7.$message.error('获取角色列表失败！'));\n\n              case 7:\n                _this7.rolesList = res.data;\n                _this7.setRoleDialogVisible = true;\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    // 点击按钮，分配角色\n    saveRoleInfo: function saveRoleInfo() {\n      var _this8 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        var _yield$_this8$$http$p, res;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (_this8.selectedRoleId) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", _this8.$message.error('请选择要分配的角色！'));\n\n              case 2:\n                _context8.next = 4;\n                return _this8.$http.put(\"users/\".concat(_this8.userInfo.id, \"/role\"), {\n                  rid: _this8.selectedRoleId\n                });\n\n              case 4:\n                _yield$_this8$$http$p = _context8.sent;\n                res = _yield$_this8$$http$p.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", _this8.$message.error('更新角色失败！'));\n\n              case 8:\n                _this8.$message.success('更新角色成功！');\n\n                _this8.getUserList();\n\n                _this8.setRoleDialogVisible = false;\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    },\n    // 监听分配角色对话框的关闭事件\n    setRoleDialogClosed: function setRoleDialogClosed() {\n      this.selectedRoleId = '';\n      this.userInfo = {};\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["data","cb","queryInfo","query","pagenum","pagesize","userlist","total","addDialogVisible","addForm","username","password","email","mobile","addFormRules","required","message","trigger","min","max","validator","editDialogVisible","editForm","editFormRules","setRoleDialogVisible","userInfo","rolesList","selectedRoleId","created","methods","getUserList","params","res","console","handleSizeChange","newSize","handleCurrentChange","newPage","userStateChanged","userinfo","addDialogClosed","addUser","valid","showEditDialog","id","editDialogClosed","editUserInfo","removeUserById","confirmButtonText","cancelButtonText","type","catch","confirmResult","setRole","saveRoleInfo","rid","setRoleDialogClosed"],"sourceRoot":"src/components/user","sources":["Users.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图区域 -->\n    <el-card>\n      <!-- 搜索与添加区域 -->\n      <el-row :gutter=\"20\">\n        <el-col :span=\"8\">\n          <el-input placeholder=\"请输入内容\" v-model=\"queryInfo.query\" clearable @clear=\"getUserList\">\n            <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"getUserList\"></el-button>\n          </el-input>\n        </el-col>\n        <el-col :span=\"4\">\n          <el-button type=\"primary\" @click=\"addDialogVisible = true\">添加用户</el-button>\n        </el-col>\n      </el-row>\n\n      <!-- 用户列表区域 -->\n      <el-table :data=\"userlist\" border stripe>\n        <el-table-column type=\"index\"></el-table-column>\n        <el-table-column label=\"姓名\" prop=\"username\"></el-table-column>\n        <el-table-column label=\"邮箱\" prop=\"email\"></el-table-column>\n        <el-table-column label=\"电话\" prop=\"mobile\"></el-table-column>\n        <el-table-column label=\"角色\" prop=\"role_name\"></el-table-column>\n        <el-table-column label=\"状态\">\n          <template slot-scope=\"scope\">\n            <el-switch v-model=\"scope.row.mg_state\" @change=\"userStateChanged(scope.row)\">\n            </el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"180px\">\n          <template slot-scope=\"scope\">\n            <!-- 修改按钮 -->\n            <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"showEditDialog(scope.row.id)\"></el-button>\n            <!-- 删除按钮 -->\n            <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeUserById(scope.row.id)\"></el-button>\n            <!-- 分配角色按钮 -->\n            <el-tooltip effect=\"dark\" content=\"分配角色\" placement=\"top\" :enterable=\"false\">\n              <el-button type=\"warning\" icon=\"el-icon-setting\" size=\"mini\" @click=\"setRole(scope.row)\"></el-button>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页区域 -->\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"queryInfo.pagenum\" :page-sizes=\"[1, 2, 5, 10]\" :page-size=\"queryInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\">\n      </el-pagination>\n    </el-card>\n\n    <!-- 添加用户的对话框 -->\n    <el-dialog title=\"添加用户\" :visible.sync=\"addDialogVisible\" width=\"50%\" @close=\"addDialogClosed\">\n      <!-- 内容主体区域 -->\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"70px\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"addForm.username\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"addForm.password\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"addForm.email\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"手机\" prop=\"mobile\">\n          <el-input v-model=\"addForm.mobile\"></el-input>\n        </el-form-item>\n      </el-form>\n      <!-- 底部区域 -->\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addUser\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 修改用户的对话框 -->\n    <el-dialog title=\"修改用户\" :visible.sync=\"editDialogVisible\" width=\"50%\" @close=\"editDialogClosed\">\n      <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"70px\">\n        <el-form-item label=\"用户名\">\n          <el-input v-model=\"editForm.username\" disabled></el-input>\n        </el-form-item>\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"editForm.email\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"手机\" prop=\"mobile\">\n          <el-input v-model=\"editForm.mobile\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editUserInfo\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 分配角色的对话框 -->\n    <el-dialog title=\"分配角色\" :visible.sync=\"setRoleDialogVisible\" width=\"50%\" @close=\"setRoleDialogClosed\">\n      <div>\n        <p>当前的用户：{{userInfo.username}}</p>\n        <p>当前的角色：{{userInfo.role_name}}</p>\n        <p>分配新角色：\n          <el-select v-model=\"selectedRoleId\" placeholder=\"请选择\">\n            <el-option v-for=\"item in rolesList\" :key=\"item.id\" :label=\"item.roleName\" :value=\"item.id\">\n            </el-option>\n          </el-select>\n        </p>\n      </div>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"setRoleDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveRoleInfo\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    // 验证邮箱的规则\n    var checkEmail = (rule, value, cb) => {\n      // 验证邮箱的正则表达式\n      const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/\n\n      if (regEmail.test(value)) {\n        // 合法的邮箱\n        return cb()\n      }\n\n      cb(new Error('请输入合法的邮箱'))\n    }\n\n    // 验证手机号的规则\n    var checkMobile = (rule, value, cb) => {\n      // 验证手机号的正则表达式\n      const regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/\n\n      if (regMobile.test(value)) {\n        return cb()\n      }\n\n      cb(new Error('请输入合法的手机号'))\n    }\n\n    return {\n      // 获取用户列表的参数对象\n      queryInfo: {\n        query: '',\n        // 当前的页数\n        pagenum: 1,\n        // 当前每页显示多少条数据\n        pagesize: 2\n      },\n      userlist: [],\n      total: 0,\n      // 控制添加用户对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加用户的表单数据\n      addForm: {\n        username: '',\n        password: '',\n        email: '',\n        mobile: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          {\n            min: 3,\n            max: 10,\n            message: '用户名的长度在3~10个字符之间',\n            trigger: 'blur'\n          }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          {\n            min: 6,\n            max: 15,\n            message: '用户名的长度在6~15个字符之间',\n            trigger: 'blur'\n          }\n        ],\n        email: [\n          { required: true, message: '请输入邮箱', trigger: 'blur' },\n          { validator: checkEmail, trigger: 'blur' }\n        ],\n        mobile: [\n          { required: true, message: '请输入手机号', trigger: 'blur' },\n          { validator: checkMobile, trigger: 'blur' }\n        ]\n      },\n      // 控制修改用户对话框的显示与隐藏\n      editDialogVisible: false,\n      // 查询到的用户信息对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        email: [\n          { required: true, message: '请输入用户邮箱', trigger: 'blur' },\n          { validator: checkEmail, trigger: 'blur' }\n        ],\n        mobile: [\n          { required: true, message: '请输入用户手机', trigger: 'blur' },\n          { validator: checkMobile, trigger: 'blur' }\n        ]\n      },\n      // 控制分配角色对话框的显示与隐藏\n      setRoleDialogVisible: false,\n      // 需要被分配角色的用户信息\n      userInfo: {},\n      // 所有角色的数据列表\n      rolesList: [],\n      // 已选中的角色Id值\n      selectedRoleId: ''\n    }\n  },\n  created() {\n    this.getUserList()\n  },\n  methods: {\n    async getUserList() {\n      const { data: res } = await this.$http.get('users', {\n        params: this.queryInfo\n      })\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取用户列表失败！')\n      }\n      this.userlist = res.data.users\n      this.total = res.data.total\n      console.log(res)\n    },\n    // 监听 pagesize 改变的事件\n    handleSizeChange(newSize) {\n      // console.log(newSize)\n      this.queryInfo.pagesize = newSize\n      this.getUserList()\n    },\n    // 监听 页码值 改变的事件\n    handleCurrentChange(newPage) {\n      console.log(newPage)\n      this.queryInfo.pagenum = newPage\n      this.getUserList()\n    },\n    // 监听 switch 开关状态的改变\n    async userStateChanged(userinfo) {\n      console.log(userinfo)\n      const { data: res } = await this.$http.put(\n        `users/${userinfo.id}/state/${userinfo.mg_state}`\n      )\n      if (res.meta.status !== 200) {\n        userinfo.mg_state = !userinfo.mg_state\n        return this.$message.error('更新用户状态失败！')\n      }\n      this.$message.success('更新用户状态成功！')\n    },\n    // 监听添加用户对话框的关闭事件\n    addDialogClosed() {\n      this.$refs.addFormRef.resetFields()\n    },\n    // 点击按钮，添加新用户\n    addUser() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return\n        // 可以发起添加用户的网络请求\n        const { data: res } = await this.$http.post('users', this.addForm)\n\n        if (res.meta.status !== 201) {\n          this.$message.error('添加用户失败！')\n        }\n\n        this.$message.success('添加用户成功！')\n        // 隐藏添加用户的对话框\n        this.addDialogVisible = false\n        // 重新获取用户列表数据\n        this.getUserList()\n      })\n    },\n    // 展示编辑用户的对话框\n    async showEditDialog(id) {\n      // console.log(id)\n      const { data: res } = await this.$http.get('users/' + id)\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('查询用户信息失败！')\n      }\n\n      this.editForm = res.data\n      this.editDialogVisible = true\n    },\n    // 监听修改用户对话框的关闭事件\n    editDialogClosed() {\n      this.$refs.editFormRef.resetFields()\n    },\n    // 修改用户信息并提交\n    editUserInfo() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) return\n        // 发起修改用户信息的数据请求\n        const { data: res } = await this.$http.put(\n          'users/' + this.editForm.id,\n          {\n            email: this.editForm.email,\n            mobile: this.editForm.mobile\n          }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('更新用户信息失败！')\n        }\n\n        // 关闭对话框\n        this.editDialogVisible = false\n        // 刷新数据列表\n        this.getUserList()\n        // 提示修改成功\n        this.$message.success('更新用户信息成功！')\n      })\n    },\n    // 根据Id删除对应的用户信息\n    async removeUserById(id) {\n      // 弹框询问用户是否删除数据\n      const confirmResult = await this.$confirm(\n        '此操作将永久删除该用户, 是否继续?',\n        '提示',\n        {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }\n      ).catch(err => err)\n\n      // 如果用户确认删除，则返回值为字符串 confirm\n      // 如果用户取消了删除，则返回值为字符串 cancel\n      // console.log(confirmResult)\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('已取消删除')\n      }\n\n      const { data: res } = await this.$http.delete('users/' + id)\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('删除用户失败！')\n      }\n\n      this.$message.success('删除用户成功！')\n      this.getUserList()\n    },\n    // 展示分配角色的对话框\n    async setRole(userInfo) {\n      this.userInfo = userInfo\n\n      // 在展示对话框之前，获取所有角色的列表\n      const { data: res } = await this.$http.get('roles')\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取角色列表失败！')\n      }\n\n      this.rolesList = res.data\n\n      this.setRoleDialogVisible = true\n    },\n    // 点击按钮，分配角色\n    async saveRoleInfo() {\n      if (!this.selectedRoleId) {\n        return this.$message.error('请选择要分配的角色！')\n      }\n\n      const { data: res } = await this.$http.put(\n        `users/${this.userInfo.id}/role`,\n        {\n          rid: this.selectedRoleId\n        }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('更新角色失败！')\n      }\n\n      this.$message.success('更新角色成功！')\n      this.getUserList()\n      this.setRoleDialogVisible = false\n    },\n    // 监听分配角色对话框的关闭事件\n    setRoleDialogClosed() {\n      this.selectedRoleId = ''\n      this.userInfo = {}\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n</style>\n"]},"metadata":{},"sourceType":"module"}