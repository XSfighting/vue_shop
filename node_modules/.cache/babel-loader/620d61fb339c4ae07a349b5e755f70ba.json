{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      // 查询条件\n      querInfo: {\n        type: 3,\n        pagenum: 1,\n        pagesize: 5\n      },\n      // 商品分类的数据列表，默认为空\n      catelist: [],\n      // 总数据条数\n      total: 0,\n      // 为table指定列的定义\n      columns: [{\n        label: '分类名称',\n        prop: 'cat_name'\n      }, {\n        label: '是否有效',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'isok'\n      }, {\n        label: '排序',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'order'\n      }, {\n        label: '操作',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'opt'\n      }],\n      // 控制添加分类对话框的显示与隐藏\n      addCateDialogVisible: false,\n      // 添加分类的表单数据对象\n      addCateForm: {\n        // 将要添加的分类的名称\n        cat_name: '',\n        // 父级分类的Id\n        cat_pid: 0,\n        // 分类的等级，默认要添加的是1级分类\n        cat_level: 0\n      },\n      // 添加分类表单的验证规则对象\n      addCateFormRules: {\n        cat_name: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }]\n      },\n      // 父级分类的列表\n      parentCateList: [],\n      // 指定级联选择器的配置对象\n      cascaderProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 选中的父级分类的Id数组\n      selectedKeys: []\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取商品分类数据\n    getCateList: function getCateList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('categories', {\n                  params: _this.querInfo\n                });\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取商品分类失败！'));\n\n              case 6:\n                console.log(res.data); // 把数据列表，赋值给 catelist\n\n                _this.catelist = res.data.result; // 为总数据条数赋值\n\n                _this.total = res.data.total;\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 监听 pagesize 改变\n    handleSizeChange: function handleSizeChange(newSize) {\n      this.querInfo.pagesize = newSize;\n      this.getCateList();\n    },\n    // 监听 pagenum 改变\n    handleCurrentChange: function handleCurrentChange(newPage) {\n      this.querInfo.pagenum = newPage;\n      this.getCateList();\n    },\n    // 点击按钮，展示添加分类的对话框\n    showAddCateDialog: function showAddCateDialog() {\n      // 先获取父级分类的数据列表\n      this.getParentCateList(); // 再展示出对话框\n\n      this.addCateDialogVisible = true;\n    },\n    // 获取父级分类的数据列表\n    getParentCateList: function getParentCateList() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this2.$http.get('categories', {\n                  params: {\n                    type: 2\n                  }\n                });\n\n              case 2:\n                _yield$_this2$$http$g = _context2.sent;\n                res = _yield$_this2$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error('获取父级分类数据失败！'));\n\n              case 6:\n                console.log(res.data);\n                _this2.parentCateList = res.data;\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 选择项发生变化触发这个函数\n    parentCateChanged: function parentCateChanged() {\n      console.log(this.selectedKeys); // 如果 selectedKeys 数组中的 length 大于0，证明选中的父级分类\n      // 反之，就说明没有选中任何父级分类\n\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1]; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = this.selectedKeys.length;\n      } else {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = 0; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = 0;\n      }\n    },\n    // 点击按钮，添加新的分类\n    addCate: function addCate() {\n      var _this3 = this;\n\n      this.$refs.addCateFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var _yield$_this3$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this3.$http.post('categories', _this3.addCateForm);\n\n                case 4:\n                  _yield$_this3$$http$p = _context3.sent;\n                  res = _yield$_this3$$http$p.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this3.$message.error('添加分类失败！'));\n\n                case 8:\n                  _this3.$message.success('添加分类成功！');\n\n                  _this3.getCateList();\n\n                  _this3.addCateDialogVisible = false;\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 监听对话框的关闭事件，重置表单数据\n    addCateDialogClosed: function addCateDialogClosed() {\n      this.$refs.addCateFormRef.resetFields();\n      this.selectedKeys = [];\n      this.addCateForm.cat_level = 0;\n      this.addCateForm.cat_pid = 0;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["data","querInfo","type","pagenum","pagesize","catelist","total","columns","label","prop","template","addCateDialogVisible","addCateForm","cat_name","cat_pid","cat_level","addCateFormRules","required","message","trigger","parentCateList","cascaderProps","value","children","selectedKeys","created","methods","getCateList","params","res","console","handleSizeChange","newSize","handleCurrentChange","newPage","showAddCateDialog","getParentCateList","parentCateChanged","addCate","valid","addCateDialogClosed"],"sourceRoot":"src/components/goods","sources":["Cate.vue"],"sourcesContent":["Gitee — 基于 Git 的代码托管和研发协作平台Gitee — 基于 Git 的代码托管和研发协作平台 我的\r\n\r\n\r\n\r\n刘龙彬 / vue_shop\r\n该仓库未声明开源许可证文件（LICENSE），使用请关注具体项目描述及其代码上游依赖。\r\nvue_shop/ src / components / goods / Cate.vue\r\nCate.vue\r\n7.69 KB\r\n刘龙彬 提交于 3年前 . 完成了报表功能的开发\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\n168\r\n169\r\n170\r\n171\r\n172\r\n173\r\n174\r\n175\r\n176\r\n177\r\n178\r\n179\r\n180\r\n181\r\n182\r\n183\r\n184\r\n185\r\n186\r\n187\r\n188\r\n189\r\n190\r\n191\r\n192\r\n193\r\n194\r\n195\r\n196\r\n197\r\n198\r\n199\r\n200\r\n201\r\n202\r\n203\r\n204\r\n205\r\n206\r\n207\r\n208\r\n209\r\n210\r\n211\r\n212\r\n213\r\n214\r\n215\r\n216\r\n217\r\n218\r\n219\r\n220\r\n221\r\n222\r\n223\r\n224\r\n225\r\n226\r\n227\r\n228\r\n229\r\n230\r\n231\r\n232\r\n233\r\n234\r\n235\r\n236\r\n237\r\n238\r\n239\r\n240\r\n241\r\n242\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航区域 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <el-row>\r\n        <el-col>\r\n          <el-button type=\"primary\" @click=\"showAddCateDialog\">添加分类</el-button>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <!-- 表格 -->\r\n      <tree-table class=\"treeTable\" :data=\"catelist\" :columns=\"columns\" :selection-type=\"false\" :expand-type=\"false\" show-index index-text=\"#\" border :show-row-hover=\"false\">\r\n        <!-- 是否有效 -->\r\n        <template slot=\"isok\" slot-scope=\"scope\">\r\n          <i class=\"el-icon-success\" v-if=\"scope.row.cat_deleted === false\" style=\"color: lightgreen;\"></i>\r\n          <i class=\"el-icon-error\" v-else style=\"color: red;\"></i>\r\n        </template>\r\n        <!-- 排序 -->\r\n        <template slot=\"order\" slot-scope=\"scope\">\r\n          <el-tag size=\"mini\" v-if=\"scope.row.cat_level===0\">一级</el-tag>\r\n          <el-tag type=\"success\" size=\"mini\" v-else-if=\"scope.row.cat_level===1\">二级</el-tag>\r\n          <el-tag type=\"warning\" size=\"mini\" v-else>三级</el-tag>\r\n        </template>\r\n        <!-- 操作 -->\r\n        <template slot=\"opt\" slot-scope=\"scope\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\">编辑</el-button>\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\">删除</el-button>\r\n        </template>\r\n      </tree-table>\r\n\r\n      <!-- 分页区域 -->\r\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"querInfo.pagenum\" :page-sizes=\"[3, 5, 10, 15]\" :page-size=\"querInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\">\r\n      </el-pagination>\r\n    </el-card>\r\n\r\n    <!-- 添加分类的对话框 -->\r\n    <el-dialog title=\"添加分类\" :visible.sync=\"addCateDialogVisible\" width=\"50%\" @close=\"addCateDialogClosed\">\r\n      <!-- 添加分类的表单 -->\r\n      <el-form :model=\"addCateForm\" :rules=\"addCateFormRules\" ref=\"addCateFormRef\" label-width=\"100px\">\r\n        <el-form-item label=\"分类名称：\" prop=\"cat_name\">\r\n          <el-input v-model=\"addCateForm.cat_name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"父级分类：\">\r\n          <!-- options 用来指定数据源 -->\r\n          <!-- props 用来指定配置对象 -->\r\n          <el-cascader expand-trigger=\"hover\" :options=\"parentCateList\" :props=\"cascaderProps\" v-model=\"selectedKeys\" @change=\"parentCateChanged\" clearable change-on-select>\r\n          </el-cascader>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addCateDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addCate\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      // 查询条件\r\n      querInfo: {\r\n        type: 3,\r\n        pagenum: 1,\r\n        pagesize: 5\r\n      },\r\n      // 商品分类的数据列表，默认为空\r\n      catelist: [],\r\n      // 总数据条数\r\n      total: 0,\r\n      // 为table指定列的定义\r\n      columns: [\r\n        {\r\n          label: '分类名称',\r\n          prop: 'cat_name'\r\n        },\r\n        {\r\n          label: '是否有效',\r\n          // 表示，将当前列定义为模板列\r\n          type: 'template',\r\n          // 表示当前这一列使用模板名称\r\n          template: 'isok'\r\n        },\r\n        {\r\n          label: '排序',\r\n          // 表示，将当前列定义为模板列\r\n          type: 'template',\r\n          // 表示当前这一列使用模板名称\r\n          template: 'order'\r\n        },\r\n        {\r\n          label: '操作',\r\n          // 表示，将当前列定义为模板列\r\n          type: 'template',\r\n          // 表示当前这一列使用模板名称\r\n          template: 'opt'\r\n        }\r\n      ],\r\n      // 控制添加分类对话框的显示与隐藏\r\n      addCateDialogVisible: false,\r\n      // 添加分类的表单数据对象\r\n      addCateForm: {\r\n        // 将要添加的分类的名称\r\n        cat_name: '',\r\n        // 父级分类的Id\r\n        cat_pid: 0,\r\n        // 分类的等级，默认要添加的是1级分类\r\n        cat_level: 0\r\n      },\r\n      // 添加分类表单的验证规则对象\r\n      addCateFormRules: {\r\n        cat_name: [\r\n          { required: true, message: '请输入分类名称', trigger: 'blur' }\r\n        ]\r\n      },\r\n      // 父级分类的列表\r\n      parentCateList: [],\r\n      // 指定级联选择器的配置对象\r\n      cascaderProps: {\r\n        value: 'cat_id',\r\n        label: 'cat_name',\r\n        children: 'children'\r\n      },\r\n      // 选中的父级分类的Id数组\r\n      selectedKeys: []\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    // 获取商品分类数据\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories', {\r\n        params: this.querInfo\r\n      })\r\n\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取商品分类失败！')\r\n      }\r\n\r\n      console.log(res.data)\r\n      // 把数据列表，赋值给 catelist\r\n      this.catelist = res.data.result\r\n      // 为总数据条数赋值\r\n      this.total = res.data.total\r\n    },\r\n    // 监听 pagesize 改变\r\n    handleSizeChange(newSize) {\r\n      this.querInfo.pagesize = newSize\r\n      this.getCateList()\r\n    },\r\n    // 监听 pagenum 改变\r\n    handleCurrentChange(newPage) {\r\n      this.querInfo.pagenum = newPage\r\n      this.getCateList()\r\n    },\r\n    // 点击按钮，展示添加分类的对话框\r\n    showAddCateDialog() {\r\n      // 先获取父级分类的数据列表\r\n      this.getParentCateList()\r\n      // 再展示出对话框\r\n      this.addCateDialogVisible = true\r\n    },\r\n    // 获取父级分类的数据列表\r\n    async getParentCateList() {\r\n      const { data: res } = await this.$http.get('categories', {\r\n        params: { type: 2 }\r\n      })\r\n\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取父级分类数据失败！')\r\n      }\r\n\r\n      console.log(res.data)\r\n      this.parentCateList = res.data\r\n    },\r\n    // 选择项发生变化触发这个函数\r\n    parentCateChanged() {\r\n      console.log(this.selectedKeys)\r\n      // 如果 selectedKeys 数组中的 length 大于0，证明选中的父级分类\r\n      // 反之，就说明没有选中任何父级分类\r\n      if (this.selectedKeys.length > 0) {\r\n        // 父级分类的Id\r\n        this.addCateForm.cat_pid = this.selectedKeys[\r\n        this.selectedKeys.length - 1\r\n            ]\r\n        // 为当前分类的等级赋值\r\n        this.addCateForm.cat_level = this.selectedKeys.length\r\n      } else {\r\n        // 父级分类的Id\r\n        this.addCateForm.cat_pid = 0\r\n        // 为当前分类的等级赋值\r\n        this.addCateForm.cat_level = 0\r\n      }\r\n    },\r\n    // 点击按钮，添加新的分类\r\n    addCate() {\r\n      this.$refs.addCateFormRef.validate(async valid => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.post(\r\n            'categories',\r\n            this.addCateForm\r\n        )\r\n\r\n        if (res.meta.status !== 201) {\r\n          return this.$message.error('添加分类失败！')\r\n        }\r\n\r\n        this.$message.success('添加分类成功！')\r\n        this.getCateList()\r\n        this.addCateDialogVisible = false\r\n      })\r\n    },\r\n    // 监听对话框的关闭事件，重置表单数据\r\n    addCateDialogClosed() {\r\n      this.$refs.addCateFormRef.resetFields()\r\n      this.selectedKeys = []\r\n      this.addCateForm.cat_level = 0\r\n      this.addCateForm.cat_pid = 0\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.treeTable {\r\n  margin-top: 15px;\r\n}\r\n\r\n.el-cascader {\r\n  width: 100%;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}