{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/13203/Desktop/\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF/vue_shop2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      // 商品分类列表\n      catelist: [],\n      // 级联选择框的配置对象\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 级联选择框双向绑定到的数组\n      selectedCateKeys: [],\n      // 被激活的页签的名称\n      activeName: 'many',\n      // 动态参数的数据\n      manyTableData: [],\n      // 静态属性的数据\n      onlyTableData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加参数的表单数据对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      },\n      // 控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      // 修改的表单数据对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取所有的商品分类列表\n    getCateList: function getCateList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('categories');\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取商品分类失败！'));\n\n              case 6:\n                _this.catelist = res.data;\n                console.log(_this.catelist);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 级联选择框选中项变化，会触发这个函数\n    handleChange: function handleChange() {\n      this.getParamsData();\n    },\n    // tab 页签点击事件的处理函数\n    handleTabClick: function handleTabClick() {\n      console.log(this.activeName);\n      this.getParamsData();\n    },\n    // 获取参数的列表数据\n    getParamsData: function getParamsData() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this2.selectedCateKeys.length !== 3)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _this2.selectedCateKeys = [];\n                _this2.manyTableData = [];\n                _this2.onlyTableData = [];\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                // 证明选中的是三级分类\n                console.log(_this2.selectedCateKeys); // 根据所选分类的Id，和当前所处的面板，获取对应的参数\n\n                _context2.next = 8;\n                return _this2.$http.get(\"categories/\".concat(_this2.cateId, \"/attributes\"), {\n                  params: {\n                    sel: _this2.activeName\n                  }\n                });\n\n              case 8:\n                _yield$_this2$$http$g = _context2.sent;\n                res = _yield$_this2$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error('获取参数列表失败！'));\n\n              case 12:\n                res.data.forEach(function (item) {\n                  item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []; // 控制文本框的显示与隐藏\n\n                  item.inputVisible = false; // 文本框中输入的值\n\n                  item.inputValue = '';\n                });\n                console.log(res.data);\n\n                if (_this2.activeName === 'many') {\n                  _this2.manyTableData = res.data;\n                } else {\n                  _this2.onlyTableData = res.data;\n                }\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 监听添加对话框的关闭事件\n    addDialogClosed: function addDialogClosed() {\n      this.$refs.addFormRef.resetFields();\n    },\n    // 点击按钮，添加参数\n    addParams: function addParams() {\n      var _this3 = this;\n\n      this.$refs.addFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var _yield$_this3$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this3.$http.post(\"categories/\".concat(_this3.cateId, \"/attributes\"), {\n                    attr_name: _this3.addForm.attr_name,\n                    attr_sel: _this3.activeName\n                  });\n\n                case 4:\n                  _yield$_this3$$http$p = _context3.sent;\n                  res = _yield$_this3$$http$p.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this3.$message.error('添加参数失败！'));\n\n                case 8:\n                  _this3.$message.success('添加参数成功！');\n\n                  _this3.addDialogVisible = false;\n\n                  _this3.getParamsData();\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 点击按钮，展示修改的对话框\n    showEditDialog: function showEditDialog(attr_id) {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var _yield$_this4$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this4.$http.get(\"categories/\".concat(_this4.cateId, \"/attributes/\").concat(attr_id), {\n                  params: {\n                    attr_sel: _this4.activeName\n                  }\n                });\n\n              case 2:\n                _yield$_this4$$http$g = _context4.sent;\n                res = _yield$_this4$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _this4.$message.error('获取参数信息失败！'));\n\n              case 6:\n                _this4.editForm = res.data;\n                _this4.editDialogVisible = true;\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    // 重置修改的表单\n    editDialogClosed: function editDialogClosed() {\n      this.$refs.editFormRef.resetFields();\n    },\n    // 点击按钮，修改参数信息\n    editParams: function editParams() {\n      var _this5 = this;\n\n      this.$refs.editFormRef.validate( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(valid) {\n          var _yield$_this5$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (valid) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 2:\n                  _context5.next = 4;\n                  return _this5.$http.put(\"categories/\".concat(_this5.cateId, \"/attributes/\").concat(_this5.editForm.attr_id), {\n                    attr_name: _this5.editForm.attr_name,\n                    attr_sel: _this5.activeName\n                  });\n\n                case 4:\n                  _yield$_this5$$http$p = _context5.sent;\n                  res = _yield$_this5$$http$p.data;\n\n                  if (!(res.meta.status !== 200)) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", _this5.$message.error('修改参数失败！'));\n\n                case 8:\n                  _this5.$message.success('修改参数成功！');\n\n                  _this5.getParamsData();\n\n                  _this5.editDialogVisible = false;\n\n                case 11:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    // 根据Id删除对应的参数项\n    removeParams: function removeParams(attr_id) {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var confirmResult, _yield$_this6$$http$d, res;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _this6.$confirm('此操作将永久删除该参数, 是否继续?', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context6.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _this6.$message.info('已取消删除！'));\n\n              case 5:\n                _context6.next = 7;\n                return _this6.$http.delete(\"categories/\".concat(_this6.cateId, \"/attributes/\").concat(attr_id));\n\n              case 7:\n                _yield$_this6$$http$d = _context6.sent;\n                res = _yield$_this6$$http$d.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _this6.$message.error('删除参数失败！'));\n\n              case 11:\n                _this6.$message.success('删除参数成功！');\n\n                _this6.getParamsData();\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    // 文本框失去焦点，或摁下了 Enter 都会触发\n    handleInputConfirm: function handleInputConfirm(row) {\n      var _this7 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(row.inputValue.trim().length === 0)) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                row.inputValue = '';\n                row.inputVisible = false;\n                return _context7.abrupt(\"return\");\n\n              case 4:\n                // 如果没有return，则证明输入的内容，需要做后续处理\n                row.attr_vals.push(row.inputValue.trim());\n                row.inputValue = '';\n                row.inputVisible = false; // 需要发起请求，保存这次操作\n\n                _this7.saveAttrVals(row);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    // 将对 attr_vals 的操作，保存到数据库\n    saveAttrVals: function saveAttrVals(row) {\n      var _this8 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        var _yield$_this8$$http$p, res;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return _this8.$http.put(\"categories/\".concat(_this8.cateId, \"/attributes/\").concat(row.attr_id), {\n                  attr_name: row.attr_name,\n                  attr_sel: row.attr_sel,\n                  attr_vals: row.attr_vals.join(' ')\n                });\n\n              case 2:\n                _yield$_this8$$http$p = _context8.sent;\n                res = _yield$_this8$$http$p.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", _this8.$message.error('修改参数项失败！'));\n\n              case 6:\n                _this8.$message.success('修改参数项成功！');\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    },\n    // 点击按钮，展示文本输入框\n    showInput: function showInput(row) {\n      var _this9 = this;\n\n      row.inputVisible = true; // 让文本框自动获得焦点\n      // $nextTick 方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n\n      this.$nextTick(function (_) {\n        _this9.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    // 删除对应的参数可选项\n    handleClose: function handleClose(i, row) {\n      row.attr_vals.splice(i, 1);\n      this.saveAttrVals(row);\n    }\n  },\n  computed: {\n    // 如果按钮需要被禁用，则返回true，否则返回false\n    isBtnDisabled: function isBtnDisabled() {\n      if (this.selectedCateKeys.length !== 3) {\n        return true;\n      }\n\n      return false;\n    },\n    // 当前选中的三级分类的Id\n    cateId: function cateId() {\n      if (this.selectedCateKeys.length === 3) {\n        return this.selectedCateKeys[2];\n      }\n\n      return null;\n    },\n    // 动态计算标题的文本\n    titleText: function titleText() {\n      if (this.activeName === 'many') {\n        return '动态参数';\n      }\n\n      return '静态属性';\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;EACAA,IADA,kBACA;IACA;MACA;MACAC,YAFA;MAGA;MACAC;QACAC,eADA;QAEAC,iBAFA;QAGAC;MAHA,CAJA;MASA;MACAC,oBAVA;MAWA;MACAC,kBAZA;MAaA;MACAC,iBAdA;MAeA;MACAC,iBAhBA;MAiBA;MACAC,uBAlBA;MAmBA;MACAC;QACAC;MADA,CApBA;MAuBA;MACAC;QACAD,YACA;UAAAE;UAAAC;UAAAC;QAAA,CADA;MADA,CAxBA;MA6BA;MACAC,wBA9BA;MA+BA;MACAC,YAhCA;MAiCA;MACAC;QACAP,YACA;UAAAE;UAAAC;UAAAC;QAAA,CADA;MADA;IAlCA;EAwCA,CA1CA;EA2CAI,OA3CA,qBA2CA;IACA;EACA,CA7CA;EA8CAC;IACA;IACAC,WAFA,yBAEA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACA,6BADA;;cAAA;gBAAA;gBACAC,GADA,yBACAvB,IADA;;gBAAA,MAEAuB,uBAFA;kBAAA;kBAAA;gBAAA;;gBAAA,iCAGA,iCAHA;;cAAA;gBAMA;gBAEAC;;cARA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IASA,CAXA;IAYA;IACAC,YAbA,0BAaA;MACA;IACA,CAfA;IAgBA;IACAC,cAjBA,4BAiBA;MACAF;MACA;IACA,CApBA;IAqBA;IACAG,aAtBA,2BAsBA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,MAEA,oCAFA;kBAAA;kBAAA;gBAAA;;gBAGA;gBACA;gBACA;gBALA;;cAAA;gBASA;gBACAH,qCAVA,CAWA;;gBAXA;gBAAA,OAYA,sCACA,aADA,kBAEA;kBACAI;oBAAAC;kBAAA;gBADA,CAFA,CAZA;;cAAA;gBAAA;gBAYAN,GAZA,yBAYAvB,IAZA;;gBAAA,MAmBAuB,uBAnBA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAoBA,kCApBA;;cAAA;gBAuBAA;kBACAO,iEADA,CAEA;;kBACAA,0BAHA,CAIA;;kBACAA;gBACA,CANA;gBAQAN;;gBACA;kBACA;gBACA,CAFA,MAEA;kBACA;gBACA;;cApCA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAqCA,CA3DA;IA4DA;IACAO,eA7DA,6BA6DA;MACA;IACA,CA/DA;IAgEA;IACAC,SAjEA,uBAiEA;MAAA;;MACA;QAAA;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBAAA,IACAC,KADA;oBAAA;oBAAA;kBAAA;;kBAAA;;gBAAA;kBAAA;kBAAA,OAEA,uCACA,aADA,kBAEA;oBACArB,mCADA;oBAEAsB;kBAFA,CAFA,CAFA;;gBAAA;kBAAA;kBAEAX,GAFA,yBAEAvB,IAFA;;kBAAA,MAUAuB,uBAVA;oBAAA;oBAAA;kBAAA;;kBAAA,kCAWA,gCAXA;;gBAAA;kBAcA;;kBACA;;kBACA;;gBAhBA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;;QAAA;UAAA;QAAA;MAAA;IAkBA,CApFA;IAqFA;IACAY,cAtFA,0BAsFAC,OAtFA,EAsFA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAEA,sCACA,aADA,yBACAA,OADA,GAEA;kBACAR;oBAAAM;kBAAA;gBADA,CAFA,CAFA;;cAAA;gBAAA;gBAEAX,GAFA,yBAEAvB,IAFA;;gBAAA,MASAuB,uBATA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAUA,kCAVA;;cAAA;gBAaA;gBACA;;cAdA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAeA,CArGA;IAsGA;IACAc,gBAvGA,8BAuGA;MACA;IACA,CAzGA;IA0GA;IACAC,UA3GA,wBA2GA;MAAA;;MACA;QAAA;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBAAA,IACAL,KADA;oBAAA;oBAAA;kBAAA;;kBAAA;;gBAAA;kBAAA;kBAAA,OAEA,sCACA,aADA,yBACA,uBADA,GAEA;oBAAArB;oBAAAsB;kBAAA,CAFA,CAFA;;gBAAA;kBAAA;kBAEAX,GAFA,yBAEAvB,IAFA;;kBAAA,MAOAuB,uBAPA;oBAAA;oBAAA;kBAAA;;kBAAA,kCAQA,gCARA;;gBAAA;kBAWA;;kBACA;;kBACA;;gBAbA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;;QAAA;UAAA;QAAA;MAAA;IAeA,CA3HA;IA4HA;IACAgB,YA7HA,wBA6HAH,OA7HA,EA6HA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACA,gBACA,oBADA,EAEA,IAFA,EAGA;kBACAI,uBADA;kBAEAC,sBAFA;kBAGAC;gBAHA,CAHA,EAQAC,KARA,CAQA;kBAAA;gBAAA,CARA,CADA;;cAAA;gBACAC,aADA;;gBAAA,MAYAA,2BAZA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAaA,8BAbA;;cAAA;gBAAA;gBAAA,OAiBA,yCACA,aADA,yBACAR,OADA,EAjBA;;cAAA;gBAAA;gBAiBAb,GAjBA,yBAiBAvB,IAjBA;;gBAAA,MAqBAuB,uBArBA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAsBA,gCAtBA;;cAAA;gBAyBA;;gBACA;;cA1BA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IA2BA,CAxJA;IAyJA;IACAsB,kBA1JA,8BA0JAC,GA1JA,EA0JA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MACAA,kCADA;kBAAA;kBAAA;gBAAA;;gBAEAA;gBACAA;gBAHA;;cAAA;gBAMA;gBACAA;gBACAA;gBACAA,yBATA,CAUA;;gBACA;;cAXA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAYA,CAtKA;IAuKA;IACAC,YAxKA,wBAwKAD,GAxKA,EAwKA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAEA,sCACA,aADA,yBACAA,WADA,GAEA;kBACAlC,wBADA;kBAEAsB,sBAFA;kBAGAc;gBAHA,CAFA,CAFA;;cAAA;gBAAA;gBAEAzB,GAFA,yBAEAvB,IAFA;;gBAAA,MAWAuB,uBAXA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAYA,iCAZA;;cAAA;gBAeA;;cAfA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAgBA,CAxLA;IAyLA;IACA0B,SA1LA,qBA0LAH,GA1LA,EA0LA;MAAA;;MACAA,wBADA,CAEA;MACA;;MACA;QACA;MACA,CAFA;IAGA,CAjMA;IAkMA;IACAI,WAnMA,uBAmMAC,CAnMA,EAmMAL,GAnMA,EAmMA;MACAA;MACA;IACA;EAtMA,CA9CA;EAsPAM;IACA;IACAC,aAFA,2BAEA;MACA;QACA;MACA;;MACA;IACA,CAPA;IAQA;IACAC,MATA,oBASA;MACA;QACA;MACA;;MACA;IACA,CAdA;IAeA;IACAC,SAhBA,uBAgBA;MACA;QACA;MACA;;MACA;IACA;EArBA;AAtPA","names":["data","catelist","cateProps","value","label","children","selectedCateKeys","activeName","manyTableData","onlyTableData","addDialogVisible","addForm","attr_name","addFormRules","required","message","trigger","editDialogVisible","editForm","editFormRules","created","methods","getCateList","res","console","handleChange","handleTabClick","getParamsData","params","sel","item","addDialogClosed","addParams","valid","attr_sel","showEditDialog","attr_id","editDialogClosed","editParams","removeParams","confirmButtonText","cancelButtonText","type","catch","confirmResult","handleInputConfirm","row","saveAttrVals","attr_vals","showInput","handleClose","i","computed","isBtnDisabled","cateId","titleText"],"sourceRoot":"src/components/goods","sources":["Params.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>参数列表</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图区域 -->\n    <el-card>\n      <!-- 警告区域 -->\n      <el-alert show-icon title=\"注意：只允许为第三级分类设置相关参数！\" type=\"warning\" :closable=\"false\"></el-alert>\n\n      <!-- 选择商品分类区域 -->\n      <el-row class=\"cat_opt\">\n        <el-col>\n          <span>选择商品分类：</span>\n          <!-- 选择商品分类的级联选择框 -->\n          <el-cascader expand-trigger=\"hover\" :options=\"catelist\" :props=\"cateProps\" v-model=\"selectedCateKeys\" @change=\"handleChange\">\n          </el-cascader>\n        </el-col>\n      </el-row>\n\n      <!-- tab 页签区域 -->\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\n        <!-- 添加动态参数的面板 -->\n        <el-tab-pane label=\"动态参数\" name=\"many\">\n          <!-- 添加参数的按钮 -->\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible=true\">添加参数</el-button>\n          <!-- 动态参数表格 -->\n          <el-table :data=\"manyTableData\" border stripe>\n            <!-- 展开行 -->\n            <el-table-column type=\"expand\">\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\n                <!-- 输入的文本框 -->\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <!-- 添加按钮 -->\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\n              </template>\n            </el-table-column>\n            <!-- 索引列 -->\n            <el-table-column type=\"index\"></el-table-column>\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\n                <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n        <!-- 添加静态属性的面板 -->\n        <el-tab-pane label=\"静态属性\" name=\"only\">\n          <!-- 添加属性的按钮 -->\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible=true\">添加属性</el-button>\n          <!-- 静态属性表格 -->\n          <el-table :data=\"onlyTableData\" border stripe>\n            <!-- 展开行 -->\n            <el-table-column type=\"expand\">\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\n                <!-- 输入的文本框 -->\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <!-- 添加按钮 -->\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\n              </template>\n            </el-table-column>\n            <!-- 索引列 -->\n            <el-table-column type=\"index\"></el-table-column>\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\n                <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n      </el-tabs>\n    </el-card>\n\n    <!-- 添加参数的对话框 -->\n    <el-dialog :title=\"'添加' + titleText\" :visible.sync=\"addDialogVisible\" width=\"50%\" @close=\"addDialogClosed\">\n      <!-- 添加参数的对话框 -->\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\">\n        <el-form-item :label=\"titleText\" prop=\"attr_name\">\n          <el-input v-model=\"addForm.attr_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 修改参数的对话框 -->\n    <el-dialog :title=\"'修改' + titleText\" :visible.sync=\"editDialogVisible\" width=\"50%\" @close=\"editDialogClosed\">\n      <!-- 添加参数的对话框 -->\n      <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"100px\">\n        <el-form-item :label=\"titleText\" prop=\"attr_name\">\n          <el-input v-model=\"editForm.attr_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 商品分类列表\n      catelist: [],\n      // 级联选择框的配置对象\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 级联选择框双向绑定到的数组\n      selectedCateKeys: [],\n      // 被激活的页签的名称\n      activeName: 'many',\n      // 动态参数的数据\n      manyTableData: [],\n      // 静态属性的数据\n      onlyTableData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加参数的表单数据对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        attr_name: [\n          { required: true, message: '请输入参数名称', trigger: 'blur' }\n        ]\n      },\n      // 控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      // 修改的表单数据对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        attr_name: [\n          { required: true, message: '请输入参数名称', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getCateList()\n  },\n  methods: {\n    // 获取所有的商品分类列表\n    async getCateList() {\n      const { data: res } = await this.$http.get('categories')\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品分类失败！')\n      }\n\n      this.catelist = res.data\n\n      console.log(this.catelist)\n    },\n    // 级联选择框选中项变化，会触发这个函数\n    handleChange() {\n      this.getParamsData()\n    },\n    // tab 页签点击事件的处理函数\n    handleTabClick() {\n      console.log(this.activeName)\n      this.getParamsData()\n    },\n    // 获取参数的列表数据\n    async getParamsData() {\n      // 证明选中的不是三级分类\n      if (this.selectedCateKeys.length !== 3) {\n        this.selectedCateKeys = []\n        this.manyTableData = []\n        this.onlyTableData = []\n        return\n      }\n\n      // 证明选中的是三级分类\n      console.log(this.selectedCateKeys)\n      // 根据所选分类的Id，和当前所处的面板，获取对应的参数\n      const { data: res } = await this.$http.get(\n        `categories/${this.cateId}/attributes`,\n        {\n          params: { sel: this.activeName }\n        }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数列表失败！')\n      }\n\n      res.data.forEach(item => {\n        item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []\n        // 控制文本框的显示与隐藏\n        item.inputVisible = false\n        // 文本框中输入的值\n        item.inputValue = ''\n      })\n\n      console.log(res.data)\n      if (this.activeName === 'many') {\n        this.manyTableData = res.data\n      } else {\n        this.onlyTableData = res.data\n      }\n    },\n    // 监听添加对话框的关闭事件\n    addDialogClosed() {\n      this.$refs.addFormRef.resetFields()\n    },\n    // 点击按钮，添加参数\n    addParams() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return\n        const { data: res } = await this.$http.post(\n          `categories/${this.cateId}/attributes`,\n          {\n            attr_name: this.addForm.attr_name,\n            attr_sel: this.activeName\n          }\n        )\n\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加参数失败！')\n        }\n\n        this.$message.success('添加参数成功！')\n        this.addDialogVisible = false\n        this.getParamsData()\n      })\n    },\n    // 点击按钮，展示修改的对话框\n    async showEditDialog(attr_id) {\n      // 查询当前参数的信息\n      const { data: res } = await this.$http.get(\n        `categories/${this.cateId}/attributes/${attr_id}`,\n        {\n          params: { attr_sel: this.activeName }\n        }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数信息失败！')\n      }\n\n      this.editForm = res.data\n      this.editDialogVisible = true\n    },\n    // 重置修改的表单\n    editDialogClosed() {\n      this.$refs.editFormRef.resetFields()\n    },\n    // 点击按钮，修改参数信息\n    editParams() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) return\n        const { data: res } = await this.$http.put(\n          `categories/${this.cateId}/attributes/${this.editForm.attr_id}`,\n          { attr_name: this.editForm.attr_name, attr_sel: this.activeName }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('修改参数失败！')\n        }\n\n        this.$message.success('修改参数成功！')\n        this.getParamsData()\n        this.editDialogVisible = false\n      })\n    },\n    // 根据Id删除对应的参数项\n    async removeParams(attr_id) {\n      const confirmResult = await this.$confirm(\n        '此操作将永久删除该参数, 是否继续?',\n        '提示',\n        {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }\n      ).catch(err => err)\n\n      // 用户取消了删除的操作\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('已取消删除！')\n      }\n\n      // 删除的业务逻辑\n      const { data: res } = await this.$http.delete(\n        `categories/${this.cateId}/attributes/${attr_id}`\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('删除参数失败！')\n      }\n\n      this.$message.success('删除参数成功！')\n      this.getParamsData()\n    },\n    // 文本框失去焦点，或摁下了 Enter 都会触发\n    async handleInputConfirm(row) {\n      if (row.inputValue.trim().length === 0) {\n        row.inputValue = ''\n        row.inputVisible = false\n        return\n      }\n      // 如果没有return，则证明输入的内容，需要做后续处理\n      row.attr_vals.push(row.inputValue.trim())\n      row.inputValue = ''\n      row.inputVisible = false\n      // 需要发起请求，保存这次操作\n      this.saveAttrVals(row)\n    },\n    // 将对 attr_vals 的操作，保存到数据库\n    async saveAttrVals(row) {\n      // 需要发起请求，保存这次操作\n      const { data: res } = await this.$http.put(\n        `categories/${this.cateId}/attributes/${row.attr_id}`,\n        {\n          attr_name: row.attr_name,\n          attr_sel: row.attr_sel,\n          attr_vals: row.attr_vals.join(' ')\n        }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('修改参数项失败！')\n      }\n\n      this.$message.success('修改参数项成功！')\n    },\n    // 点击按钮，展示文本输入框\n    showInput(row) {\n      row.inputVisible = true\n      // 让文本框自动获得焦点\n      // $nextTick 方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n      this.$nextTick(_ => {\n        this.$refs.saveTagInput.$refs.input.focus()\n      })\n    },\n    // 删除对应的参数可选项\n    handleClose(i, row) {\n      row.attr_vals.splice(i, 1)\n      this.saveAttrVals(row)\n    }\n  },\n  computed: {\n    // 如果按钮需要被禁用，则返回true，否则返回false\n    isBtnDisabled() {\n      if (this.selectedCateKeys.length !== 3) {\n        return true\n      }\n      return false\n    },\n    // 当前选中的三级分类的Id\n    cateId() {\n      if (this.selectedCateKeys.length === 3) {\n        return this.selectedCateKeys[2]\n      }\n      return null\n    },\n    // 动态计算标题的文本\n    titleText() {\n      if (this.activeName === 'many') {\n        return '动态参数'\n      }\n      return '静态属性'\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.cat_opt {\n  margin: 15px 0;\n}\n\n.el-tag {\n  margin: 10px;\n}\n\n.input-new-tag {\n  width: 120px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}