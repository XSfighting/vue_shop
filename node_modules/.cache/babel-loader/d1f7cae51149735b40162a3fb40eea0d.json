{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data() {\n    return {\n      // 商品分类列表\n      catelist: [],\n      // 级联选择框的配置对象\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 级联选择框双向绑定到的数组\n      selectedCateKeys: [],\n      // 被激活的页签的名称\n      activeName: 'many',\n      // 动态参数的数据\n      manyTableData: [],\n      // 静态属性的数据\n      onlyTableData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加参数的表单数据对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      },\n      // 控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      // 修改的表单数据对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n\n  created() {\n    this.getCateList();\n  },\n\n  methods: {\n    // 获取所有的商品分类列表\n    async getCateList() {\n      const {\n        data: res\n      } = await this.$http.get('categories');\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品分类失败！');\n      }\n\n      this.catelist = res.data;\n      console.log(this.catelist);\n    },\n\n    // 级联选择框选中项变化，会触发这个函数\n    handleChange() {\n      this.getParamsData();\n    },\n\n    // tab 页签点击事件的处理函数\n    handleTabClick() {\n      console.log(this.activeName);\n      this.getParamsData();\n    },\n\n    // 获取参数的列表数据\n    async getParamsData() {\n      // 证明选中的不是三级分类\n      if (this.selectedCateKeys.length !== 3) {\n        this.selectedCateKeys = [];\n        this.manyTableData = [];\n        this.onlyTableData = [];\n        return;\n      } // 证明选中的是三级分类\n\n\n      console.log(this.selectedCateKeys); // 根据所选分类的Id，和当前所处的面板，获取对应的参数\n\n      const {\n        data: res\n      } = await this.$http.get(`categories/${this.cateId}/attributes`, {\n        params: {\n          sel: this.activeName\n        }\n      });\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数列表失败！');\n      }\n\n      res.data.forEach(item => {\n        item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []; // 控制文本框的显示与隐藏\n\n        item.inputVisible = false; // 文本框中输入的值\n\n        item.inputValue = '';\n      });\n      console.log(res.data);\n\n      if (this.activeName === 'many') {\n        this.manyTableData = res.data;\n      } else {\n        this.onlyTableData = res.data;\n      }\n    },\n\n    // 监听添加对话框的关闭事件\n    addDialogClosed() {\n      this.$refs.addFormRef.resetFields();\n    },\n\n    // 点击按钮，添加参数\n    addParams() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return;\n        const {\n          data: res\n        } = await this.$http.post(`categories/${this.cateId}/attributes`, {\n          attr_name: this.addForm.attr_name,\n          attr_sel: this.activeName\n        });\n\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加参数失败！');\n        }\n\n        this.$message.success('添加参数成功！');\n        this.addDialogVisible = false;\n        this.getParamsData();\n      });\n    },\n\n    // 点击按钮，展示修改的对话框\n    async showEditDialog(attr_id) {\n      // 查询当前参数的信息\n      const {\n        data: res\n      } = await this.$http.get(`categories/${this.cateId}/attributes/${attr_id}`, {\n        params: {\n          attr_sel: this.activeName\n        }\n      });\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数信息失败！');\n      }\n\n      this.editForm = res.data;\n      this.editDialogVisible = true;\n    },\n\n    // 重置修改的表单\n    editDialogClosed() {\n      this.$refs.editFormRef.resetFields();\n    },\n\n    // 点击按钮，修改参数信息\n    editParams() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) return;\n        const {\n          data: res\n        } = await this.$http.put(`categories/${this.cateId}/attributes/${this.editForm.attr_id}`, {\n          attr_name: this.editForm.attr_name,\n          attr_sel: this.activeName\n        });\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('修改参数失败！');\n        }\n\n        this.$message.success('修改参数成功！');\n        this.getParamsData();\n        this.editDialogVisible = false;\n      });\n    },\n\n    // 根据Id删除对应的参数项\n    async removeParams(attr_id) {\n      const confirmResult = await this.$confirm('此操作将永久删除该参数, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(err => err); // 用户取消了删除的操作\n\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('已取消删除！');\n      } // 删除的业务逻辑\n\n\n      const {\n        data: res\n      } = await this.$http.delete(`categories/${this.cateId}/attributes/${attr_id}`);\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('删除参数失败！');\n      }\n\n      this.$message.success('删除参数成功！');\n      this.getParamsData();\n    },\n\n    // 文本框失去焦点，或摁下了 Enter 都会触发\n    async handleInputConfirm(row) {\n      if (row.inputValue.trim().length === 0) {\n        row.inputValue = '';\n        row.inputVisible = false;\n        return;\n      } // 如果没有return，则证明输入的内容，需要做后续处理\n\n\n      row.attr_vals.push(row.inputValue.trim());\n      row.inputValue = '';\n      row.inputVisible = false; // 需要发起请求，保存这次操作\n\n      this.saveAttrVals(row);\n    },\n\n    // 将对 attr_vals 的操作，保存到数据库\n    async saveAttrVals(row) {\n      // 需要发起请求，保存这次操作\n      const {\n        data: res\n      } = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`, {\n        attr_name: row.attr_name,\n        attr_sel: row.attr_sel,\n        attr_vals: row.attr_vals.join(' ')\n      });\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('修改参数项失败！');\n      }\n\n      this.$message.success('修改参数项成功！');\n    },\n\n    // 点击按钮，展示文本输入框\n    showInput(row) {\n      row.inputVisible = true; // 让文本框自动获得焦点\n      // $nextTick 方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n\n      this.$nextTick(_ => {\n        this.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n\n    // 删除对应的参数可选项\n    handleClose(i, row) {\n      row.attr_vals.splice(i, 1);\n      this.saveAttrVals(row);\n    }\n\n  },\n  computed: {\n    // 如果按钮需要被禁用，则返回true，否则返回false\n    isBtnDisabled() {\n      if (this.selectedCateKeys.length !== 3) {\n        return true;\n      }\n\n      return false;\n    },\n\n    // 当前选中的三级分类的Id\n    cateId() {\n      if (this.selectedCateKeys.length === 3) {\n        return this.selectedCateKeys[2];\n      }\n\n      return null;\n    },\n\n    // 动态计算标题的文本\n    titleText() {\n      if (this.activeName === 'many') {\n        return '动态参数';\n      }\n\n      return '静态属性';\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;EACAA;IACA;MACA;MACAC,YAFA;MAGA;MACAC;QACAC,eADA;QAEAC,iBAFA;QAGAC;MAHA,CAJA;MASA;MACAC,oBAVA;MAWA;MACAC,kBAZA;MAaA;MACAC,iBAdA;MAeA;MACAC,iBAhBA;MAiBA;MACAC,uBAlBA;MAmBA;MACAC;QACAC;MADA,CApBA;MAuBA;MACAC;QACAD,YACA;UAAAE;UAAAC;UAAAC;QAAA,CADA;MADA,CAxBA;MA6BA;MACAC,wBA9BA;MA+BA;MACAC,YAhCA;MAiCA;MACAC;QACAP,YACA;UAAAE;UAAAC;UAAAC;QAAA,CADA;MADA;IAlCA;EAwCA,CA1CA;;EA2CAI;IACA;EACA,CA7CA;;EA8CAC;IACA;IACA;MACA;QAAArB;MAAA;;MACA;QACA;MACA;;MAEA;MAEAsB;IACA,CAXA;;IAYA;IACAC;MACA;IACA,CAfA;;IAgBA;IACAC;MACAF;MACA;IACA,CApBA;;IAqBA;IACA;MACA;MACA;QACA;QACA;QACA;QACA;MACA,CAPA,CASA;;;MACAA,mCAVA,CAWA;;MACA;QAAAtB;MAAA,yBACA,sCADA,EAEA;QACAyB;UAAAC;QAAA;MADA,CAFA;;MAOA;QACA;MACA;;MAEAC;QACAC,iEADA,CAEA;;QACAA,0BAHA,CAIA;;QACAA;MACA,CANA;MAQAN;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CA3DA;;IA4DA;IACAO;MACA;IACA,CA/DA;;IAgEA;IACAC;MACA;QACA;QACA;UAAA9B;QAAA,0BACA,sCADA,EAEA;UACAY,iCADA;UAEAmB;QAFA,CAFA;;QAQA;UACA;QACA;;QAEA;QACA;QACA;MACA,CAjBA;IAkBA,CApFA;;IAqFA;IACA;MACA;MACA;QAAA/B;MAAA,yBACA,iDADA,EAEA;QACAyB;UAAAM;QAAA;MADA,CAFA;;MAOA;QACA;MACA;;MAEA;MACA;IACA,CArGA;;IAsGA;IACAC;MACA;IACA,CAzGA;;IA0GA;IACAC;MACA;QACA;QACA;UAAAjC;QAAA,yBACA,+DADA,EAEA;UAAAY;UAAAmB;QAAA,CAFA;;QAKA;UACA;QACA;;QAEA;QACA;QACA;MACA,CAdA;IAeA,CA3HA;;IA4HA;IACA;MACA,0CACA,oBADA,EAEA,IAFA,EAGA;QACAG,uBADA;QAEAC,sBAFA;QAGAC;MAHA,CAHA,EAQAC,KARA,CAQAC,UARA,EADA,CAWA;;MACA;QACA;MACA,CAdA,CAgBA;;;MACA;QAAAtC;MAAA,4BACA,iDADA;;MAIA;QACA;MACA;;MAEA;MACA;IACA,CAxJA;;IAyJA;IACA;MACA;QACAuC;QACAA;QACA;MACA,CALA,CAMA;;;MACAA;MACAA;MACAA,yBATA,CAUA;;MACA;IACA,CAtKA;;IAuKA;IACA;MACA;MACA;QAAAvC;MAAA,yBACA,qDADA,EAEA;QACAY,wBADA;QAEAmB,sBAFA;QAGAS;MAHA,CAFA;;MASA;QACA;MACA;;MAEA;IACA,CAxLA;;IAyLA;IACAC;MACAF,wBADA,CAEA;MACA;;MACA;QACA;MACA,CAFA;IAGA,CAjMA;;IAkMA;IACAG;MACAH;MACA;IACA;;EAtMA,CA9CA;EAsPAI;IACA;IACAC;MACA;QACA;MACA;;MACA;IACA,CAPA;;IAQA;IACAC;MACA;QACA;MACA;;MACA;IACA,CAdA;;IAeA;IACAC;MACA;QACA;MACA;;MACA;IACA;;EArBA;AAtPA","names":["data","catelist","cateProps","value","label","children","selectedCateKeys","activeName","manyTableData","onlyTableData","addDialogVisible","addForm","attr_name","addFormRules","required","message","trigger","editDialogVisible","editForm","editFormRules","created","methods","console","handleChange","handleTabClick","params","sel","res","item","addDialogClosed","addParams","attr_sel","editDialogClosed","editParams","confirmButtonText","cancelButtonText","type","catch","err","row","attr_vals","showInput","handleClose","computed","isBtnDisabled","cateId","titleText"],"sourceRoot":"src/components/goods","sources":["Params.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 面包屑导航区域 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>参数列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 警告区域 -->\r\n      <el-alert show-icon title=\"注意：只允许为第三级分类设置相关参数！\" type=\"warning\" :closable=\"false\"></el-alert>\r\n\r\n      <!-- 选择商品分类区域 -->\r\n      <el-row class=\"cat_opt\">\r\n        <el-col>\r\n          <span>选择商品分类：</span>\r\n          <!-- 选择商品分类的级联选择框 -->\r\n          <el-cascader expand-trigger=\"hover\" :options=\"catelist\" :props=\"cateProps\" v-model=\"selectedCateKeys\" @change=\"handleChange\">\r\n          </el-cascader>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <!-- tab 页签区域 -->\r\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\r\n        <!-- 添加动态参数的面板 -->\r\n        <el-tab-pane label=\"动态参数\" name=\"many\">\r\n          <!-- 添加参数的按钮 -->\r\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible=true\">添加参数</el-button>\r\n          <!-- 动态参数表格 -->\r\n          <el-table :data=\"manyTableData\" border stripe>\r\n            <!-- 展开行 -->\r\n            <el-table-column type=\"expand\">\r\n              <template slot-scope=\"scope\">\r\n                <!-- 循环渲染Tag标签 -->\r\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\r\n                <!-- 输入的文本框 -->\r\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\">\r\n                </el-input>\r\n                <!-- 添加按钮 -->\r\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\r\n              </template>\r\n            </el-table-column>\r\n            <!-- 索引列 -->\r\n            <el-table-column type=\"index\"></el-table-column>\r\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\r\n                <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n        <!-- 添加静态属性的面板 -->\r\n        <el-tab-pane label=\"静态属性\" name=\"only\">\r\n          <!-- 添加属性的按钮 -->\r\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible=true\">添加属性</el-button>\r\n          <!-- 静态属性表格 -->\r\n          <el-table :data=\"onlyTableData\" border stripe>\r\n            <!-- 展开行 -->\r\n            <el-table-column type=\"expand\">\r\n              <template slot-scope=\"scope\">\r\n                <!-- 循环渲染Tag标签 -->\r\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\r\n                <!-- 输入的文本框 -->\r\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\">\r\n                </el-input>\r\n                <!-- 添加按钮 -->\r\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\r\n              </template>\r\n            </el-table-column>\r\n            <!-- 索引列 -->\r\n            <el-table-column type=\"index\"></el-table-column>\r\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\r\n                <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n    </el-card>\r\n\r\n    <!-- 添加参数的对话框 -->\r\n    <el-dialog :title=\"'添加' + titleText\" :visible.sync=\"addDialogVisible\" width=\"50%\" @close=\"addDialogClosed\">\r\n      <!-- 添加参数的对话框 -->\r\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\">\r\n        <el-form-item :label=\"titleText\" prop=\"attr_name\">\r\n          <el-input v-model=\"addForm.attr_name\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n\r\n    <!-- 修改参数的对话框 -->\r\n    <el-dialog :title=\"'修改' + titleText\" :visible.sync=\"editDialogVisible\" width=\"50%\" @close=\"editDialogClosed\">\r\n      <!-- 添加参数的对话框 -->\r\n      <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"100px\">\r\n        <el-form-item :label=\"titleText\" prop=\"attr_name\">\r\n          <el-input v-model=\"editForm.attr_name\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      // 商品分类列表\r\n      catelist: [],\r\n      // 级联选择框的配置对象\r\n      cateProps: {\r\n        value: 'cat_id',\r\n        label: 'cat_name',\r\n        children: 'children'\r\n      },\r\n      // 级联选择框双向绑定到的数组\r\n      selectedCateKeys: [],\r\n      // 被激活的页签的名称\r\n      activeName: 'many',\r\n      // 动态参数的数据\r\n      manyTableData: [],\r\n      // 静态属性的数据\r\n      onlyTableData: [],\r\n      // 控制添加对话框的显示与隐藏\r\n      addDialogVisible: false,\r\n      // 添加参数的表单数据对象\r\n      addForm: {\r\n        attr_name: ''\r\n      },\r\n      // 添加表单的验证规则对象\r\n      addFormRules: {\r\n        attr_name: [\r\n          { required: true, message: '请输入参数名称', trigger: 'blur' }\r\n        ]\r\n      },\r\n      // 控制修改对话框的显示与隐藏\r\n      editDialogVisible: false,\r\n      // 修改的表单数据对象\r\n      editForm: {},\r\n      // 修改表单的验证规则对象\r\n      editFormRules: {\r\n        attr_name: [\r\n          { required: true, message: '请输入参数名称', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    // 获取所有的商品分类列表\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories')\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取商品分类失败！')\r\n      }\r\n\r\n      this.catelist = res.data\r\n\r\n      console.log(this.catelist)\r\n    },\r\n    // 级联选择框选中项变化，会触发这个函数\r\n    handleChange() {\r\n      this.getParamsData()\r\n    },\r\n    // tab 页签点击事件的处理函数\r\n    handleTabClick() {\r\n      console.log(this.activeName)\r\n      this.getParamsData()\r\n    },\r\n    // 获取参数的列表数据\r\n    async getParamsData() {\r\n      // 证明选中的不是三级分类\r\n      if (this.selectedCateKeys.length !== 3) {\r\n        this.selectedCateKeys = []\r\n        this.manyTableData = []\r\n        this.onlyTableData = []\r\n        return\r\n      }\r\n\r\n      // 证明选中的是三级分类\r\n      console.log(this.selectedCateKeys)\r\n      // 根据所选分类的Id，和当前所处的面板，获取对应的参数\r\n      const { data: res } = await this.$http.get(\r\n          `categories/${this.cateId}/attributes`,\r\n          {\r\n            params: { sel: this.activeName }\r\n          }\r\n      )\r\n\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取参数列表失败！')\r\n      }\r\n\r\n      res.data.forEach(item => {\r\n        item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []\r\n        // 控制文本框的显示与隐藏\r\n        item.inputVisible = false\r\n        // 文本框中输入的值\r\n        item.inputValue = ''\r\n      })\r\n\r\n      console.log(res.data)\r\n      if (this.activeName === 'many') {\r\n        this.manyTableData = res.data\r\n      } else {\r\n        this.onlyTableData = res.data\r\n      }\r\n    },\r\n    // 监听添加对话框的关闭事件\r\n    addDialogClosed() {\r\n      this.$refs.addFormRef.resetFields()\r\n    },\r\n    // 点击按钮，添加参数\r\n    addParams() {\r\n      this.$refs.addFormRef.validate(async valid => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.post(\r\n            `categories/${this.cateId}/attributes`,\r\n            {\r\n              attr_name: this.addForm.attr_name,\r\n              attr_sel: this.activeName\r\n            }\r\n        )\r\n\r\n        if (res.meta.status !== 201) {\r\n          return this.$message.error('添加参数失败！')\r\n        }\r\n\r\n        this.$message.success('添加参数成功！')\r\n        this.addDialogVisible = false\r\n        this.getParamsData()\r\n      })\r\n    },\r\n    // 点击按钮，展示修改的对话框\r\n    async showEditDialog(attr_id) {\r\n      // 查询当前参数的信息\r\n      const { data: res } = await this.$http.get(\r\n          `categories/${this.cateId}/attributes/${attr_id}`,\r\n          {\r\n            params: { attr_sel: this.activeName }\r\n          }\r\n      )\r\n\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取参数信息失败！')\r\n      }\r\n\r\n      this.editForm = res.data\r\n      this.editDialogVisible = true\r\n    },\r\n    // 重置修改的表单\r\n    editDialogClosed() {\r\n      this.$refs.editFormRef.resetFields()\r\n    },\r\n    // 点击按钮，修改参数信息\r\n    editParams() {\r\n      this.$refs.editFormRef.validate(async valid => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.put(\r\n            `categories/${this.cateId}/attributes/${this.editForm.attr_id}`,\r\n            { attr_name: this.editForm.attr_name, attr_sel: this.activeName }\r\n        )\r\n\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error('修改参数失败！')\r\n        }\r\n\r\n        this.$message.success('修改参数成功！')\r\n        this.getParamsData()\r\n        this.editDialogVisible = false\r\n      })\r\n    },\r\n    // 根据Id删除对应的参数项\r\n    async removeParams(attr_id) {\r\n      const confirmResult = await this.$confirm(\r\n          '此操作将永久删除该参数, 是否继续?',\r\n          '提示',\r\n          {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }\r\n      ).catch(err => err)\r\n\r\n      // 用户取消了删除的操作\r\n      if (confirmResult !== 'confirm') {\r\n        return this.$message.info('已取消删除！')\r\n      }\r\n\r\n      // 删除的业务逻辑\r\n      const { data: res } = await this.$http.delete(\r\n          `categories/${this.cateId}/attributes/${attr_id}`\r\n      )\r\n\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('删除参数失败！')\r\n      }\r\n\r\n      this.$message.success('删除参数成功！')\r\n      this.getParamsData()\r\n    },\r\n    // 文本框失去焦点，或摁下了 Enter 都会触发\r\n    async handleInputConfirm(row) {\r\n      if (row.inputValue.trim().length === 0) {\r\n        row.inputValue = ''\r\n        row.inputVisible = false\r\n        return\r\n      }\r\n      // 如果没有return，则证明输入的内容，需要做后续处理\r\n      row.attr_vals.push(row.inputValue.trim())\r\n      row.inputValue = ''\r\n      row.inputVisible = false\r\n      // 需要发起请求，保存这次操作\r\n      this.saveAttrVals(row)\r\n    },\r\n    // 将对 attr_vals 的操作，保存到数据库\r\n    async saveAttrVals(row) {\r\n      // 需要发起请求，保存这次操作\r\n      const { data: res } = await this.$http.put(\r\n          `categories/${this.cateId}/attributes/${row.attr_id}`,\r\n          {\r\n            attr_name: row.attr_name,\r\n            attr_sel: row.attr_sel,\r\n            attr_vals: row.attr_vals.join(' ')\r\n          }\r\n      )\r\n\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('修改参数项失败！')\r\n      }\r\n\r\n      this.$message.success('修改参数项成功！')\r\n    },\r\n    // 点击按钮，展示文本输入框\r\n    showInput(row) {\r\n      row.inputVisible = true\r\n      // 让文本框自动获得焦点\r\n      // $nextTick 方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\r\n      this.$nextTick(_ => {\r\n        this.$refs.saveTagInput.$refs.input.focus()\r\n      })\r\n    },\r\n    // 删除对应的参数可选项\r\n    handleClose(i, row) {\r\n      row.attr_vals.splice(i, 1)\r\n      this.saveAttrVals(row)\r\n    }\r\n  },\r\n  computed: {\r\n    // 如果按钮需要被禁用，则返回true，否则返回false\r\n    isBtnDisabled() {\r\n      if (this.selectedCateKeys.length !== 3) {\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n    // 当前选中的三级分类的Id\r\n    cateId() {\r\n      if (this.selectedCateKeys.length === 3) {\r\n        return this.selectedCateKeys[2]\r\n      }\r\n      return null\r\n    },\r\n    // 动态计算标题的文本\r\n    titleText() {\r\n      if (this.activeName === 'many') {\r\n        return '动态参数'\r\n      }\r\n      return '静态属性'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.cat_opt {\r\n  margin: 15px 0;\r\n}\r\n\r\n.el-tag {\r\n  margin: 10px;\r\n}\r\n\r\n.input-new-tag {\r\n  width: 120px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}